; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\core_state.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\core_state.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -I..\Coremark -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DMAIN_HAS_NOARGC --omf_browse=.\obj\core_state.crf ..\Coremark\core_state.c]
                          THUMB

                          AREA ||i.core_bench_state||, CODE, READONLY, ALIGN=1

                  core_bench_state PROC
;;;42     */
;;;43     ee_u16 core_bench_state(ee_u32 blksize, ee_u8 *memblock, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;44     		ee_s16 seed1, ee_s16 seed2, ee_s16 step, ee_u16 crc) 
;;;45     {
000004  b095              SUB      sp,sp,#0x54
000006  4680              MOV      r8,r0
;;;46     	ee_u32 final_counts[NUM_CORE_STATES];
;;;47     	ee_u32 track_counts[NUM_CORE_STATES];
;;;48     	ee_u8 *p=memblock;
;;;49     	ee_u32 i;
;;;50     
;;;51     
;;;52     #if CORE_DEBUG
;;;53     	ee_printf("State Bench: %d,%d,%d,%04x\n",seed1,seed2,step,crc);
;;;54     #endif
;;;55     	for (i=0; i<NUM_CORE_STATES; i++) {
000008  2000              MOVS     r0,#0
00000a  e9dd6a1e          LDRD     r6,r10,[sp,#0x78]     ;45
00000e  900a              STR      r0,[sp,#0x28]
000010  900b              STR      r0,[sp,#0x2c]
000012  900c              STR      r0,[sp,#0x30]
000014  900f              STR      r0,[sp,#0x3c]
000016  9010              STR      r0,[sp,#0x40]
000018  900d              STR      r0,[sp,#0x34]
00001a  900e              STR      r0,[sp,#0x38]
00001c  9011              STR      r0,[sp,#0x44]
00001e  9000              STR      r0,[sp,#0]
000020  9001              STR      r0,[sp,#4]
000022  460d              MOV      r5,r1                 ;45
000024  9002              STR      r0,[sp,#8]
000026  9003              STR      r0,[sp,#0xc]
000028  9004              STR      r0,[sp,#0x10]
00002a  9005              STR      r0,[sp,#0x14]
00002c  9006              STR      r0,[sp,#0x18]
00002e  e9cd0507          STRD     r0,r5,[sp,#0x1c]
;;;56     		final_counts[i]=track_counts[i]=0;
;;;57     	}
;;;58     	/* run the state machine over the input */
;;;59     	while (*p!=0) {
000032  7828              LDRB     r0,[r5,#0]
000034  4699              MOV      r9,r3                 ;45
000036  4693              MOV      r11,r2                ;45
000038  466f              MOV      r7,sp                 ;46
00003a  b160              CBZ      r0,|L1.86|
                  |L1.60|
;;;60     		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
00003c  a90a              ADD      r1,sp,#0x28
00003e  a808              ADD      r0,sp,#0x20
000040  f7fffffe          BL       core_state_transition
;;;61     		final_counts[fstate]++;
000044  f8571020          LDR      r1,[r7,r0,LSL #2]
000048  1c49              ADDS     r1,r1,#1
00004a  f8471020          STR      r1,[r7,r0,LSL #2]
;;;62     #if CORE_DEBUG
;;;63     	ee_printf("%d,",fstate);
;;;64     	}
;;;65     	ee_printf("\n");
;;;66     #else
;;;67     	}
00004e  9808              LDR      r0,[sp,#0x20]
000050  7800              LDRB     r0,[r0,#0]
000052  2800              CMP      r0,#0
000054  d1f2              BNE      |L1.60|
                  |L1.86|
;;;68     #endif
;;;69     	p=memblock;
;;;70     	while (p < (memblock+blksize)) { /* insert some corruption */
000056  eb050008          ADD      r0,r5,r8
00005a  1b40              SUBS     r0,r0,r5
00005c  4430              ADD      r0,r0,r6
00005e  f1a00801          SUB      r8,r0,#1
000062  fb98f0f6          SDIV     r0,r8,r6
000066  462c              MOV      r4,r5                 ;69
000068  9508              STR      r5,[sp,#0x20]
00006a  2800              CMP      r0,#0
;;;71     		if (*p!=',')
;;;72     			*p^=(ee_u8)seed1;
00006c  bfc8              IT       GT
00006e  f00b02ff          ANDGT    r2,r11,#0xff
000072  dd07              BLE      |L1.132|
                  |L1.116|
000074  7821              LDRB     r1,[r4,#0]            ;71
000076  292c              CMP      r1,#0x2c              ;71
000078  bf1c              ITT      NE
00007a  4051              EORNE    r1,r1,r2
00007c  7021              STRBNE   r1,[r4,#0]
00007e  4434              ADD      r4,r4,r6
000080  1e40              SUBS     r0,r0,#1
000082  d1f7              BNE      |L1.116|
                  |L1.132|
;;;73     		p+=step;
;;;74     	}
;;;75     	p=memblock;
;;;76     	/* run the state machine over the input again */
;;;77     	while (*p!=0) {
000084  9508              STR      r5,[sp,#0x20]
000086  7828              LDRB     r0,[r5,#0]
000088  b160              CBZ      r0,|L1.164|
                  |L1.138|
;;;78     		enum CORE_STATE fstate=core_state_transition(&p,track_counts);
00008a  a90a              ADD      r1,sp,#0x28
00008c  a808              ADD      r0,sp,#0x20
00008e  f7fffffe          BL       core_state_transition
;;;79     		final_counts[fstate]++;
000092  f8571020          LDR      r1,[r7,r0,LSL #2]
000096  1c49              ADDS     r1,r1,#1
000098  f8471020          STR      r1,[r7,r0,LSL #2]
;;;80     #if CORE_DEBUG
;;;81     	ee_printf("%d,",fstate);
;;;82     	}
;;;83     	ee_printf("\n");
;;;84     #else
;;;85     	}
00009c  9808              LDR      r0,[sp,#0x20]
00009e  7800              LDRB     r0,[r0,#0]
0000a0  2800              CMP      r0,#0
0000a2  d1f2              BNE      |L1.138|
                  |L1.164|
;;;86     #endif
;;;87     	p=memblock;
;;;88     	while (p < (memblock+blksize)) { /* undo corruption is seed1 and seed2 are equal */
0000a4  fb98f0f6          SDIV     r0,r8,r6
0000a8  9508              STR      r5,[sp,#0x20]
0000aa  2800              CMP      r0,#0
;;;89     		if (*p!=',')
;;;90     			*p^=(ee_u8)seed2;
0000ac  bfc8              IT       GT
0000ae  f00902ff          ANDGT    r2,r9,#0xff
0000b2  dd07              BLE      |L1.196|
                  |L1.180|
0000b4  7829              LDRB     r1,[r5,#0]            ;89
0000b6  292c              CMP      r1,#0x2c              ;89
0000b8  bf1c              ITT      NE
0000ba  4051              EORNE    r1,r1,r2
0000bc  7029              STRBNE   r1,[r5,#0]
0000be  4435              ADD      r5,r5,r6
0000c0  1e40              SUBS     r0,r0,#1
0000c2  d1f7              BNE      |L1.180|
                  |L1.196|
;;;91     		p+=step;
;;;92     	}
;;;93     	/* end timing */
;;;94     	for (i=0; i<NUM_CORE_STATES; i++) {
0000c4  2400              MOVS     r4,#0
0000c6  ad0a              ADD      r5,sp,#0x28           ;47
                  |L1.200|
;;;95     		crc=crcu32(final_counts[i],crc);
0000c8  f8570024          LDR      r0,[r7,r4,LSL #2]
0000cc  4651              MOV      r1,r10
0000ce  f7fffffe          BL       crcu32
;;;96     		crc=crcu32(track_counts[i],crc);
0000d2  f8552024          LDR      r2,[r5,r4,LSL #2]
0000d6  4601              MOV      r1,r0
0000d8  4610              MOV      r0,r2
0000da  f7fffffe          BL       crcu32
0000de  1c64              ADDS     r4,r4,#1
0000e0  4682              MOV      r10,r0
0000e2  2c08              CMP      r4,#8
0000e4  d3f0              BCC      |L1.200|
;;;97     	}
;;;98     	return crc;
;;;99     }
0000e6  b015              ADD      sp,sp,#0x54
0000e8  e8bd8ff0          POP      {r4-r11,pc}
;;;100    
                          ENDP


                          AREA ||i.core_init_state||, CODE, READONLY, ALIGN=2

                  core_init_state PROC
;;;115    */
;;;116    void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;117    	ee_u32 total=0,next=0,i;
000004  f04f0c00          MOV      r12,#0
;;;118    	ee_u8 *buf=0;
;;;119    #if CORE_DEBUG
;;;120    	ee_u8 *start=p;
;;;121    	ee_printf("State: %d,%d\n",size,seed);
;;;122    #endif
;;;123    	size--;
000008  f1a00801          SUB      r8,r0,#1
00000c  4665              MOV      r5,r12                ;117
00000e  4666              MOV      r6,r12                ;118
;;;124    	next=0;
;;;125    	while ((total+next+1)<size) {
000010  4667              MOV      r7,r12
000012  f1b80f01          CMP      r8,#1
000016  d94d              BLS      |L2.180|
;;;126    		if (next>0) {
;;;127    			for(i=0;i<next;i++)
;;;128    				*(p+total+i)=buf[i];
;;;129    			*(p+total+i)=',';
;;;130    			total+=next+1;
;;;131    		}
;;;132    		seed++;
;;;133    		switch (seed & 0x7) {
;;;134    			case 0: /* int */
;;;135    			case 1: /* int */
;;;136    			case 2: /* int */
;;;137    				buf=intpat[(seed>>3) & 0x3];
000018  f8dfa0e8          LDR      r10,|L2.260|
;;;138    				next=4;
;;;139    			break;
;;;140    			case 3: /* float */
;;;141    			case 4: /* float */
;;;142    				buf=floatpat[(seed>>3) & 0x3];
00001c  f10a0b10          ADD      r11,r10,#0x10
;;;143    				next=8;
;;;144    			break;
;;;145    			case 5: /* scientific */
;;;146    			case 6: /* scientific */
;;;147    				buf=scipat[(seed>>3) & 0x3];
000020  f10a0e20          ADD      lr,r10,#0x20
000024  e01d              B        |L2.98|
                  |L2.38|
000026  b1e5              CBZ      r5,|L2.98|
000028  eb02000c          ADD      r0,r2,r12             ;127
00002c  1e73              SUBS     r3,r6,#1              ;127
00002e  9000              STR      r0,[sp,#0]            ;127
000030  1e40              SUBS     r0,r0,#1              ;127
;;;148    				next=8;
;;;149    			break;
;;;150    			case 7: /* invalid */
;;;151    				buf=errpat[(seed>>3) & 0x3];
;;;152    				next=8;
;;;153    			break;
;;;154    			default: /* Never happen, just to make some compilers happy */
;;;155    			break;
;;;156    		}
;;;157    	}
;;;158    	size++;
;;;159    	while (total<size) { /* fill the rest with 0 */
;;;160    		*(p+total)=0;
;;;161    		total++;
;;;162    	}
;;;163    #if CORE_DEBUG
;;;164    	ee_printf("State Input: %s\n",start);
;;;165    #endif
;;;166    }
000032  f0150f01          TST      r5,#1
000036  d003              BEQ      |L2.64|
000038  f813cf01          LDRB     r12,[r3,#1]!          ;128
00003c  f800cf01          STRB     r12,[r0,#1]!          ;128
                  |L2.64|
000040  ea5f0c55          LSRS     r12,r5,#1             ;127
000044  d008              BEQ      |L2.88|
                  |L2.70|
000046  785c              LDRB     r4,[r3,#1]            ;128
000048  7044              STRB     r4,[r0,#1]            ;128
00004a  f8134f02          LDRB     r4,[r3,#2]!           ;128
00004e  f8004f02          STRB     r4,[r0,#2]!           ;128
000052  f1bc0c01          SUBS     r12,r12,#1            ;128
000056  d1f6              BNE      |L2.70|
                  |L2.88|
000058  9b00              LDR      r3,[sp,#0]            ;129
00005a  202c              MOVS     r0,#0x2c              ;129
00005c  f1090c01          ADD      r12,r9,#1             ;130
000060  5558              STRB     r0,[r3,r5]            ;129
                  |L2.98|
000062  1c48              ADDS     r0,r1,#1              ;132
000064  b201              SXTH     r1,r0                 ;132
000066  f0010007          AND      r0,r1,#7              ;133
00006a  2808              CMP      r0,#8                 ;133
00006c  d21c              BCS      |L2.168|
00006e  e8dff000          TBB      [pc,r0]               ;133
000072  0404              DCB      0x04,0x04
000074  040a0a0f          DCB      0x04,0x0a,0x0a,0x0f
000078  0f15              DCB      0x0f,0x15
00007a  f3c100c1          UBFX     r0,r1,#3,#2           ;137
00007e  2504              MOVS     r5,#4                 ;138
000080  f85a6020          LDR      r6,[r10,r0,LSL #2]    ;137
000084  e010              B        |L2.168|
000086  f3c100c1          UBFX     r0,r1,#3,#2           ;142
00008a  f85b6020          LDR      r6,[r11,r0,LSL #2]    ;142
00008e  e003              B        |L2.152|
000090  f3c100c1          UBFX     r0,r1,#3,#2           ;147
000094  f85e6020          LDR      r6,[lr,r0,LSL #2]     ;147
                  |L2.152|
000098  2508              MOVS     r5,#8                 ;143
00009a  e005              B        |L2.168|
00009c  481a              LDR      r0,|L2.264|
00009e  f3c103c1          UBFX     r3,r1,#3,#2           ;151
0000a2  2508              MOVS     r5,#8                 ;152
0000a4  f8506023          LDR      r6,[r0,r3,LSL #2]     ;151
                  |L2.168|
0000a8  eb0c0905          ADD      r9,r12,r5             ;139
0000ac  f1090001          ADD      r0,r9,#1              ;139
0000b0  4540              CMP      r0,r8                 ;139
0000b2  d3b8              BCC      |L2.38|
                  |L2.180|
0000b4  f1080001          ADD      r0,r8,#1              ;158
0000b8  4584              CMP      r12,r0                ;159
0000ba  bf38              IT       CC                    ;159
0000bc  f1b04f00          CMPCC    r0,#0x80000000        ;159
0000c0  d214              BCS      |L2.236|
0000c2  eb02010c          ADD      r1,r2,r12             ;159
0000c6  eba0000c          SUB      r0,r0,r12
0000ca  1e49              SUBS     r1,r1,#1
0000cc  f0100f01          TST      r0,#1
0000d0  bf18              IT       NE                    ;160
0000d2  f8017f01          STRBNE   r7,[r1,#1]!           ;160
0000d6  0840              LSRS     r0,r0,#1              ;159
0000d8  bf08              IT       EQ
0000da  e8bd8ff8          POPEQ    {r3-r11,pc}
                  |L2.222|
0000de  704f              STRB     r7,[r1,#1]            ;160
0000e0  f8017f02          STRB     r7,[r1,#2]!           ;160
0000e4  1e40              SUBS     r0,r0,#1              ;160
0000e6  d1fa              BNE      |L2.222|
0000e8  e8bd8ff8          POP      {r3-r11,pc}
                  |L2.236|
0000ec  4560              CMP      r0,r12                ;159
0000ee  bf98              IT       LS
0000f0  e8bd8ff8          POPLS    {r3-r11,pc}
                  |L2.244|
0000f4  f802700c          STRB     r7,[r2,r12]           ;160
0000f8  f10c0c01          ADD      r12,r12,#1            ;160
0000fc  4584              CMP      r12,r0                ;161
0000fe  d3f9              BCC      |L2.244|
000100  e8bd8ff8          POP      {r3-r11,pc}
;;;167    
                          ENDP

                  |L2.260|
                          DCD      ||.data||
                  |L2.264|
                          DCD      ||.data||+0x30

                          AREA ||i.core_state_transition||, CODE, READONLY, ALIGN=1

                  core_state_transition PROC
;;;183    
;;;184    enum CORE_STATE core_state_transition( ee_u8 **instr , ee_u32 *transition_count) {
000000  6803              LDR      r3,[r0,#0]
000002  4684              MOV      r12,r0
;;;185    	ee_u8 *str=*instr;
;;;186    	ee_u8 NEXT_SYMBOL;
;;;187    	enum CORE_STATE state=CORE_START;
000004  2000              MOVS     r0,#0
;;;188    	for( ; *str && state != CORE_INVALID; str++ ) {
000006  781a              LDRB     r2,[r3,#0]
000008  2a00              CMP      r2,#0
00000a  f00080ca          BEQ.W    |L3.418|
;;;189    		NEXT_SYMBOL = *str;
;;;190    		if (NEXT_SYMBOL==',') /* end of this input */ {
00000e  2a2c              CMP      r2,#0x2c
000010  d05b              BEQ      |L3.202|
000012  f1a20030          SUB      r0,r2,#0x30           ;188
000016  2809              CMP      r0,#9                 ;188
;;;191    			str++;
;;;192    			break;
;;;193    		}
;;;194    		switch(state) {
000018  d833              BHI      |L3.130|
;;;195    		case CORE_START:
;;;196    			if(ee_isdigit(NEXT_SYMBOL)) {
;;;197    				state = CORE_INT;
;;;198    			}
;;;199    			else if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
;;;200    				state = CORE_S1;
;;;201    			}
;;;202    			else if( NEXT_SYMBOL == '.' ) {
;;;203    				state = CORE_FLOAT;
;;;204    			}
;;;205    			else {
;;;206    				state = CORE_INVALID;
;;;207    				transition_count[CORE_INVALID]++;
;;;208    			}
;;;209    			transition_count[CORE_START]++;
00001a  680a              LDR      r2,[r1,#0]
00001c  2004              MOVS     r0,#4                 ;197
00001e  1c52              ADDS     r2,r2,#1
000020  600a              STR      r2,[r1,#0]            ;188
000022  f8132f01          LDRB     r2,[r3,#1]!           ;188
000026  2a00              CMP      r2,#0                 ;188
000028  d076              BEQ      |L3.280|
00002a  2a2c              CMP      r2,#0x2c              ;190
00002c  d07b              BEQ      |L3.294|
00002e  e05e              B        |L3.238|
                  |L3.48|
000030  f1a20030          SUB      r0,r2,#0x30           ;188
000034  2809              CMP      r0,#9                 ;188
000036  d870              BHI      |L3.282|
;;;210    			break;
;;;211    		case CORE_S1:
;;;212    			if(ee_isdigit(NEXT_SYMBOL)) {
;;;213    				state = CORE_INT;
;;;214    				transition_count[CORE_S1]++;
;;;215    			}
;;;216    			else if( NEXT_SYMBOL == '.' ) {
;;;217    				state = CORE_FLOAT;
;;;218    				transition_count[CORE_S1]++;
;;;219    			}
;;;220    			else {
;;;221    				state = CORE_INVALID;
;;;222    				transition_count[CORE_S1]++;
;;;223    			}
;;;224    			break;
;;;225    		case CORE_INT:
;;;226    			if( NEXT_SYMBOL == '.' ) {
;;;227    				state = CORE_FLOAT;
;;;228    				transition_count[CORE_INT]++;
;;;229    			}
;;;230    			else if(!ee_isdigit(NEXT_SYMBOL)) {
;;;231    				state = CORE_INVALID;
;;;232    				transition_count[CORE_INT]++;
;;;233    			}
;;;234    			break;
;;;235    		case CORE_FLOAT:
;;;236    			if( NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e' ) {
;;;237    				state = CORE_S2;
;;;238    				transition_count[CORE_FLOAT]++;
;;;239    			}
;;;240    			else if(!ee_isdigit(NEXT_SYMBOL)) {
;;;241    				state = CORE_INVALID;
;;;242    				transition_count[CORE_FLOAT]++;
;;;243    			}
;;;244    			break;
;;;245    		case CORE_S2:
;;;246    			if( NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-' ) {
;;;247    				state = CORE_EXPONENT;
;;;248    				transition_count[CORE_S2]++;
;;;249    			}
;;;250    			else {
;;;251    				state = CORE_INVALID;
;;;252    				transition_count[CORE_S2]++;
;;;253    			}
;;;254    			break;
;;;255    		case CORE_EXPONENT:
;;;256    			if(ee_isdigit(NEXT_SYMBOL)) {
;;;257    				state = CORE_SCIENTIFIC;
;;;258    				transition_count[CORE_EXPONENT]++;
000038  698a              LDR      r2,[r1,#0x18]
00003a  2007              MOVS     r0,#7                 ;257
00003c  1c52              ADDS     r2,r2,#1
00003e  618a              STR      r2,[r1,#0x18]         ;188
000040  f8132f01          LDRB     r2,[r3,#1]!           ;188
000044  2a00              CMP      r2,#0                 ;188
000046  d067              BEQ      |L3.280|
000048  2a2c              CMP      r2,#0x2c              ;190
00004a  d167              BNE      |L3.284|
00004c  e06b              B        |L3.294|
                  |L3.78|
00004e  2a2b              CMP      r2,#0x2b              ;246
000050  bf18              IT       NE                    ;246
000052  2a2d              CMPNE    r2,#0x2d              ;246
000054  d077              BEQ      |L3.326|
000056  68ca              LDR      r2,[r1,#0xc]          ;252
000058  f04f0001          MOV      r0,#1                 ;251
00005c  f1020201          ADD      r2,r2,#1              ;252
000060  60ca              STR      r2,[r1,#0xc]          ;252
000062  e060              B        |L3.294|
                  |L3.100|
000064  f1a20030          SUB      r0,r2,#0x30           ;252
000068  2809              CMP      r0,#9                 ;252
00006a  d82f              BHI      |L3.204|
00006c  688a              LDR      r2,[r1,#8]            ;214
00006e  2004              MOVS     r0,#4                 ;213
000070  1c52              ADDS     r2,r2,#1              ;214
000072  608a              STR      r2,[r1,#8]            ;188
000074  f8132f01          LDRB     r2,[r3,#1]!           ;188
000078  2a00              CMP      r2,#0                 ;188
00007a  d04d              BEQ      |L3.280|
00007c  2a2c              CMP      r2,#0x2c              ;190
00007e  d052              BEQ      |L3.294|
000080  e035              B        |L3.238|
                  |L3.130|
000082  2a2b              CMP      r2,#0x2b              ;199
000084  bf18              IT       NE                    ;199
000086  2a2d              CMPNE    r2,#0x2d              ;199
000088  d00a              BEQ      |L3.160|
00008a  2a2e              CMP      r2,#0x2e              ;202
00008c  d013              BEQ      |L3.182|
00008e  684a              LDR      r2,[r1,#4]            ;207
000090  2001              MOVS     r0,#1                 ;206
000092  1c52              ADDS     r2,r2,#1              ;207
000094  604a              STR      r2,[r1,#4]            ;209
000096  680a              LDR      r2,[r1,#0]            ;209
000098  1c52              ADDS     r2,r2,#1              ;209
00009a  1c5b              ADDS     r3,r3,#1              ;209
00009c  600a              STR      r2,[r1,#0]            ;207
00009e  e080              B        |L3.418|
                  |L3.160|
0000a0  680a              LDR      r2,[r1,#0]            ;209
0000a2  2002              MOVS     r0,#2                 ;200
0000a4  1c52              ADDS     r2,r2,#1              ;209
0000a6  600a              STR      r2,[r1,#0]            ;188
0000a8  f8132f01          LDRB     r2,[r3,#1]!           ;188
0000ac  2a00              CMP      r2,#0                 ;188
0000ae  d078              BEQ      |L3.418|
0000b0  2a2c              CMP      r2,#0x2c              ;190
0000b2  d038              BEQ      |L3.294|
0000b4  e7d6              B        |L3.100|
                  |L3.182|
0000b6  680a              LDR      r2,[r1,#0]            ;209
0000b8  2005              MOVS     r0,#5                 ;203
0000ba  1c52              ADDS     r2,r2,#1              ;209
0000bc  600a              STR      r2,[r1,#0]            ;188
0000be  f8132f01          LDRB     r2,[r3,#1]!           ;188
0000c2  2a00              CMP      r2,#0                 ;188
0000c4  d06d              BEQ      |L3.418|
0000c6  2a2c              CMP      r2,#0x2c              ;190
0000c8  d12f              BNE      |L3.298|
                  |L3.202|
0000ca  e02c              B        |L3.294|
                  |L3.204|
0000cc  2a2e              CMP      r2,#0x2e              ;216
0000ce  d004              BEQ      |L3.218|
0000d0  688a              LDR      r2,[r1,#8]            ;222
0000d2  2001              MOVS     r0,#1                 ;221
0000d4  1c52              ADDS     r2,r2,#1              ;222
0000d6  608a              STR      r2,[r1,#8]            ;222
0000d8  e025              B        |L3.294|
                  |L3.218|
0000da  688a              LDR      r2,[r1,#8]            ;218
0000dc  2005              MOVS     r0,#5                 ;217
0000de  1c52              ADDS     r2,r2,#1              ;218
0000e0  608a              STR      r2,[r1,#8]            ;188
0000e2  f8132f01          LDRB     r2,[r3,#1]!           ;188
0000e6  b1ba              CBZ      r2,|L3.280|
0000e8  2a2c              CMP      r2,#0x2c              ;190
0000ea  d11e              BNE      |L3.298|
0000ec  e01b              B        |L3.294|
                  |L3.238|
0000ee  2a2e              CMP      r2,#0x2e              ;226
0000f0  d008              BEQ      |L3.260|
0000f2  3a30              SUBS     r2,r2,#0x30           ;226
0000f4  2a09              CMP      r2,#9                 ;226
0000f6  d812              BHI      |L3.286|
0000f8  f8132f01          LDRB     r2,[r3,#1]!           ;188
0000fc  b162              CBZ      r2,|L3.280|
0000fe  2a2c              CMP      r2,#0x2c              ;190
000100  d1f5              BNE      |L3.238|
000102  e010              B        |L3.294|
                  |L3.260|
000104  690a              LDR      r2,[r1,#0x10]         ;228
000106  2005              MOVS     r0,#5                 ;227
000108  1c52              ADDS     r2,r2,#1              ;228
00010a  610a              STR      r2,[r1,#0x10]         ;188
00010c  f8132f01          LDRB     r2,[r3,#1]!           ;188
000110  b112              CBZ      r2,|L3.280|
000112  2a2c              CMP      r2,#0x2c              ;190
000114  d109              BNE      |L3.298|
000116  e006              B        |L3.294|
                  |L3.280|
000118  e042              B        |L3.416|
                  |L3.282|
00011a  e02e              B        |L3.378|
                  |L3.284|
00011c  e032              B        |L3.388|
                  |L3.286|
00011e  690a              LDR      r2,[r1,#0x10]         ;232
000120  2001              MOVS     r0,#1                 ;231
000122  1c52              ADDS     r2,r2,#1              ;232
000124  610a              STR      r2,[r1,#0x10]         ;232
                  |L3.294|
000126  1c5b              ADDS     r3,r3,#1              ;232
000128  e03b              B        |L3.418|
                  |L3.298|
00012a  2a45              CMP      r2,#0x45              ;236
00012c  bf18              IT       NE                    ;236
00012e  2a65              CMPNE    r2,#0x65              ;236
000130  d00a              BEQ      |L3.328|
000132  f1a20230          SUB      r2,r2,#0x30           ;236
000136  2a09              CMP      r2,#9                 ;236
000138  d810              BHI      |L3.348|
00013a  f8132f01          LDRB     r2,[r3,#1]!           ;188
00013e  b37a              CBZ      r2,|L3.416|
000140  2a2c              CMP      r2,#0x2c              ;190
000142  d1f2              BNE      |L3.298|
000144  e7ef              B        |L3.294|
                  |L3.326|
000146  e00e              B        |L3.358|
                  |L3.328|
000148  694a              LDR      r2,[r1,#0x14]         ;238
00014a  2003              MOVS     r0,#3                 ;237
00014c  1c52              ADDS     r2,r2,#1              ;238
00014e  614a              STR      r2,[r1,#0x14]         ;188
000150  f8132f01          LDRB     r2,[r3,#1]!           ;188
000154  b322              CBZ      r2,|L3.416|
000156  2a2c              CMP      r2,#0x2c              ;190
000158  d0e5              BEQ      |L3.294|
00015a  e778              B        |L3.78|
                  |L3.348|
00015c  694a              LDR      r2,[r1,#0x14]         ;242
00015e  2001              MOVS     r0,#1                 ;241
000160  1c52              ADDS     r2,r2,#1              ;242
000162  614a              STR      r2,[r1,#0x14]         ;242
000164  e7df              B        |L3.294|
                  |L3.358|
000166  68ca              LDR      r2,[r1,#0xc]          ;248
000168  2006              MOVS     r0,#6                 ;247
00016a  1c52              ADDS     r2,r2,#1              ;248
00016c  60ca              STR      r2,[r1,#0xc]          ;188
00016e  f8132f01          LDRB     r2,[r3,#1]!           ;188
000172  b1aa              CBZ      r2,|L3.416|
000174  2a2c              CMP      r2,#0x2c              ;190
000176  d0d6              BEQ      |L3.294|
000178  e75a              B        |L3.48|
                  |L3.378|
;;;259    			}
;;;260    			else {
;;;261    				state = CORE_INVALID;
;;;262    				transition_count[CORE_EXPONENT]++;
00017a  698a              LDR      r2,[r1,#0x18]
00017c  2001              MOVS     r0,#1                 ;261
00017e  1c52              ADDS     r2,r2,#1
000180  618a              STR      r2,[r1,#0x18]
000182  e7d0              B        |L3.294|
                  |L3.388|
000184  3a30              SUBS     r2,r2,#0x30
000186  2a09              CMP      r2,#9
000188  d805              BHI      |L3.406|
00018a  f8132f01          LDRB     r2,[r3,#1]!           ;188
00018e  b13a              CBZ      r2,|L3.416|
000190  2a2c              CMP      r2,#0x2c              ;190
000192  d1f7              BNE      |L3.388|
000194  e7c7              B        |L3.294|
                  |L3.406|
;;;263    			}
;;;264    			break;
;;;265    		case CORE_SCIENTIFIC:
;;;266    			if(!ee_isdigit(NEXT_SYMBOL)) {
;;;267    				state = CORE_INVALID;
;;;268    				transition_count[CORE_INVALID]++;
000196  684a              LDR      r2,[r1,#4]
000198  2001              MOVS     r0,#1                 ;267
00019a  1c52              ADDS     r2,r2,#1
00019c  604a              STR      r2,[r1,#4]
00019e  e7c2              B        |L3.294|
                  |L3.416|
0001a0  e7ff              B        |L3.418|
                  |L3.418|
;;;269    			}
;;;270    			break;
;;;271    		default:
;;;272    			break;
;;;273    		}
;;;274    	}
;;;275    	*instr=str;
0001a2  f8cc3000          STR      r3,[r12,#0]
;;;276    	return state;
;;;277    }
0001a6  4770              BX       lr
                          ENDP


                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  35303132          DCB      "5012",0
000004  00      
000005  00                DCB      0
000006  00                DCB      0
000007  00                DCB      0
000008  31323334          DCB      "1234",0
00000c  00      
00000d  00                DCB      0
00000e  00                DCB      0
00000f  00                DCB      0
000010  2d383734          DCB      "-874",0
000014  00      
000015  00                DCB      0
000016  00                DCB      0
000017  00                DCB      0
000018  2b313232          DCB      "+122",0
00001c  00      
00001d  00                DCB      0
00001e  00                DCB      0
00001f  00                DCB      0
000020  33352e35          DCB      "35.54400",0
000024  34343030
000028  00      
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0
00002c  2e313233          DCB      ".1234500",0
000030  34353030
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0
000038  2d313130          DCB      "-110.700",0
00003c  2e373030
000040  00      
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0
000044  2b302e36          DCB      "+0.64400",0
000048  34343030
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
000050  352e3530          DCB      "5.500e+3",0
000054  30652b33
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0
00005c  2d2e3132          DCB      "-.123e-2",0
000060  33652d32
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
000068  2d383765          DCB      "-87e+832",0
00006c  2b383332
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
000074  2b302e36          DCB      "+0.6e-12",0
000078  652d3132
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
000080  54302e33          DCB      "T0.3e-1F",0
000084  652d3146
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
00008c  2d542e54          DCB      "-T.T++Tq",0
000090  2b2b5471
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
000098  3154332e          DCB      "1T3.4e4z",0
00009c  3465347a
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0
0000a4  33342e30          DCB      "34.0e-T^",0
0000a8  652d545e
0000ac  00      

                          AREA ||.data||, DATA, ALIGN=2

                  intpat
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x18
                  floatpat
                          DCD      ||.conststring||+0x20
                          DCD      ||.conststring||+0x2c
                          DCD      ||.conststring||+0x38
                          DCD      ||.conststring||+0x44
                  scipat
                          DCD      ||.conststring||+0x50
                          DCD      ||.conststring||+0x5c
                          DCD      ||.conststring||+0x68
                          DCD      ||.conststring||+0x74
                  errpat
                          DCD      ||.conststring||+0x80
                          DCD      ||.conststring||+0x8c
                          DCD      ||.conststring||+0x98
                          DCD      ||.conststring||+0xa4
