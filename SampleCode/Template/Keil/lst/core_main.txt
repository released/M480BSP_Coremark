; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\core_main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\core_main.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -I..\Coremark -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DMAIN_HAS_NOARGC --omf_browse=.\obj\core_main.crf ..\Coremark\core_main.c]
                          THUMB

                          AREA ||i.iterate||, CODE, READONLY, ALIGN=1

                  iterate PROC
;;;37     static ee_u16 state_known_crc[]  =      {(ee_u16)0x5e47,(ee_u16)0x39bf,(ee_u16)0xe5a4,(ee_u16)0x8e3a,(ee_u16)0x8d84};
;;;38     void *iterate(void *pres) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;39     	ee_u32 i;
;;;40     	ee_u16 crc;
;;;41     	core_results *res=(core_results *)pres;
;;;42     	ee_u32 iterations=res->iterations;
;;;43     	res->crc=0;
000004  69c6              LDR      r6,[r0,#0x1c]
000006  2000              MOVS     r0,#0
000008  8720              STRH     r0,[r4,#0x38]
;;;44     	res->crclist=0;
00000a  8760              STRH     r0,[r4,#0x3a]
;;;45     	res->crcmatrix=0;
00000c  87a0              STRH     r0,[r4,#0x3c]
;;;46     	res->crcstate=0;
00000e  87e0              STRH     r0,[r4,#0x3e]
;;;47     
;;;48     	for (i=0; i<iterations; i++) {
000010  4605              MOV      r5,r0
000012  2e00              CMP      r6,#0
000014  d916              BLS      |L1.68|
                  |L1.22|
;;;49     		crc=core_bench_list(res,1);
000016  2101              MOVS     r1,#1
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       core_bench_list
;;;50     		res->crc=crcu16(crc,res->crc);
00001e  8f21              LDRH     r1,[r4,#0x38]
000020  f7fffffe          BL       crcu16
000024  8720              STRH     r0,[r4,#0x38]
;;;51     		crc=core_bench_list(res,-1);
000026  f04f31ff          MOV      r1,#0xffffffff
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       core_bench_list
;;;52     		res->crc=crcu16(crc,res->crc);
000030  8f21              LDRH     r1,[r4,#0x38]
000032  f7fffffe          BL       crcu16
000036  8720              STRH     r0,[r4,#0x38]
;;;53     		if (i==0) res->crclist=res->crc;
000038  2d00              CMP      r5,#0
00003a  bf08              IT       EQ
00003c  8760              STRHEQ   r0,[r4,#0x3a]
00003e  1c6d              ADDS     r5,r5,#1
000040  42b5              CMP      r5,r6                 ;48
000042  d3e8              BCC      |L1.22|
                  |L1.68|
;;;54     	}
;;;55     	return NULL;
000044  2000              MOVS     r0,#0
;;;56     }
000046  bd70              POP      {r4-r6,pc}
;;;57     
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=3

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_u
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  main PROC
;;;88     #if MAIN_HAS_NOARGC
;;;89     MAIN_RETURN_TYPE main(void) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  ed2d8b06          VPUSH    {d8-d10}
000008  b095              SUB      sp,sp,#0x54
;;;90     	int argc=0;
00000a  f04f0a00          MOV      r10,#0
;;;91     	char *argv[1];
;;;92     #else
;;;93     MAIN_RETURN_TYPE main(int argc, char *argv[]) {
;;;94     #endif
;;;95     	ee_u16 i,j=0,num_algorithms=0;
;;;96     	ee_s16 known_id=-1,total_errors=0;
;;;97     	ee_u16 seedcrc=0;
;;;98     	CORE_TICKS total_time;
;;;99     	core_results results[MULTITHREAD];
;;;100    #if (MEM_METHOD==MEM_STACK)
;;;101    	ee_u8 stack_memblock[TOTAL_DATA_SIZE*MULTITHREAD];
;;;102    #endif
;;;103    	/* first call any initializations needed */
;;;104    	portable_init(&(results[0].port), &argc, argv);
00000e  a913              ADD      r1,sp,#0x4c
000010  4657              MOV      r7,r10                ;95
000012  4654              MOV      r4,r10                ;95
000014  f04f36ff          MOV      r6,#0xffffffff        ;96
000018  46d0              MOV      r8,r10                ;96
00001a  aa14              ADD      r2,sp,#0x50
00001c  ad02              ADD      r5,sp,#8
00001e  1e88              SUBS     r0,r1,#2
000020  f8cda04c          STR      r10,[sp,#0x4c]
000024  f7fffffe          BL       portable_init
;;;105    	/* First some checks to make sure benchmark will run ok */
;;;106    	if (sizeof(struct list_head_s)>128) {
;;;107    		ee_printf("list_head structure too big for comparable data!\n");
;;;108    		return MAIN_RETURN_VAL;
;;;109    	}
;;;110    	results[0].seed1=get_seed(1);
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       get_seed_32
00002e  f8ad0008          STRH     r0,[sp,#8]
;;;111    	results[0].seed2=get_seed(2);
000032  2002              MOVS     r0,#2
000034  f7fffffe          BL       get_seed_32
000038  f8ad000a          STRH     r0,[sp,#0xa]
;;;112    	results[0].seed3=get_seed(3);
00003c  2003              MOVS     r0,#3
00003e  f7fffffe          BL       get_seed_32
000042  f8ad000c          STRH     r0,[sp,#0xc]
;;;113    	results[0].iterations=get_seed_32(4);
000046  2004              MOVS     r0,#4
000048  f7fffffe          BL       get_seed_32
;;;114    #if CORE_DEBUG
;;;115    	results[0].iterations=1;
;;;116    #endif
;;;117    	results[0].execs=get_seed_32(5);
00004c  9009              STR      r0,[sp,#0x24]
00004e  2005              MOVS     r0,#5
000050  f7fffffe          BL       get_seed_32
;;;118    	if (results[0].execs==0) { /* if not supplied, execute all algorithms */
000054  900a              STR      r0,[sp,#0x28]
000056  2800              CMP      r0,#0
;;;119    		results[0].execs=ALL_ALGORITHMS_MASK;
000058  bf04              ITT      EQ
00005a  2007              MOVEQ    r0,#7
00005c  900a              STREQ    r0,[sp,#0x28]
;;;120    	}
;;;121    		/* put in some default values based on one seed only for easy testing */
;;;122    	if ((results[0].seed1==0) && (results[0].seed2==0) && (results[0].seed3==0)) { /* validation run */
00005e  f8bd0008          LDRH     r0,[sp,#8]
;;;123    		results[0].seed1=0;
;;;124    		results[0].seed2=0;
;;;125    		results[0].seed3=0x66;
000062  2166              MOVS     r1,#0x66
000064  2800              CMP      r0,#0                 ;122
000066  bf01              ITTTT    EQ                    ;122
000068  f8bd000a          LDRHEQ   r0,[sp,#0xa]          ;122
00006c  2800              CMPEQ    r0,#0                 ;122
00006e  f8bd000c          LDRHEQ   r0,[sp,#0xc]          ;122
000072  2800              CMPEQ    r0,#0                 ;122
000074  d105              BNE      |L2.130|
000076  f8ada008          STRH     r10,[sp,#8]           ;123
00007a  f8ada00a          STRH     r10,[sp,#0xa]         ;124
00007e  f8ad100c          STRH     r1,[sp,#0xc]
                  |L2.130|
;;;126    	}
;;;127    	if ((results[0].seed1==1) && (results[0].seed2==0) && (results[0].seed3==0)) { /* perfromance run */
000082  f8bd0008          LDRH     r0,[sp,#8]
000086  2801              CMP      r0,#1
000088  bf01              ITTTT    EQ
00008a  f8bd000a          LDRHEQ   r0,[sp,#0xa]
00008e  2800              CMPEQ    r0,#0
000090  f8bd000c          LDRHEQ   r0,[sp,#0xc]
000094  2800              CMPEQ    r0,#0
000096  d107              BNE      |L2.168|
;;;128    		results[0].seed1=0x3415;
000098  f2434015          MOV      r0,#0x3415
00009c  f8ad0008          STRH     r0,[sp,#8]
;;;129    		results[0].seed2=0x3415;
0000a0  f8ad000a          STRH     r0,[sp,#0xa]
;;;130    		results[0].seed3=0x66;
0000a4  f8ad100c          STRH     r1,[sp,#0xc]
                  |L2.168|
;;;131    	}
;;;132    #if (MEM_METHOD==MEM_STATIC)
;;;133    	results[0].memblock[0]=(void *)static_memblk;
0000a8  48eb              LDR      r0,|L2.1112|
;;;134    	results[0].size=TOTAL_DATA_SIZE;
0000aa  9004              STR      r0,[sp,#0x10]
0000ac  f44f60fa          MOV      r0,#0x7d0
;;;135    	results[0].err=0;
0000b0  9008              STR      r0,[sp,#0x20]
;;;136    	#if (MULTITHREAD>1)
;;;137    	#error "Cannot use a static data area with multiple contexts!"
;;;138    	#endif
;;;139    #elif (MEM_METHOD==MEM_MALLOC)
;;;140    	for (i=0 ; i<MULTITHREAD; i++) {
;;;141    		ee_s32 malloc_override=get_seed(7);
;;;142    		if (malloc_override != 0) 
;;;143    			results[i].size=malloc_override;
;;;144    		else
;;;145    			results[i].size=TOTAL_DATA_SIZE;
;;;146    		results[i].memblock[0]=portable_malloc(results[i].size);
;;;147    		results[i].seed1=results[0].seed1;
;;;148    		results[i].seed2=results[0].seed2;
;;;149    		results[i].seed3=results[0].seed3;
;;;150    		results[i].err=0;
;;;151    		results[i].execs=results[0].execs;
;;;152    	}
;;;153    #elif (MEM_METHOD==MEM_STACK)
;;;154    	for (i=0 ; i<MULTITHREAD; i++) {
;;;155    		results[i].memblock[0]=stack_memblock+i*TOTAL_DATA_SIZE;
;;;156    		results[i].size=TOTAL_DATA_SIZE;
;;;157    		results[i].seed1=results[0].seed1;
;;;158    		results[i].seed2=results[0].seed2;
;;;159    		results[i].seed3=results[0].seed3;
;;;160    		results[i].err=0;
;;;161    		results[i].execs=results[0].execs;
;;;162    	}
;;;163    #else
;;;164    #error "Please define a way to initialize a memory block."
;;;165    #endif
;;;166    	/* Data init */ 
;;;167    	/* Find out how space much we have based on number of algorithms */
;;;168    	for (i=0; i<NUM_ALGORITHMS; i++) {
;;;169    		if ((1<<(ee_u32)i) & results[0].execs)
0000b2  980a              LDR      r0,[sp,#0x28]
0000b4  f8ada048          STRH     r10,[sp,#0x48]        ;135
0000b8  f0100f01          TST      r0,#1
0000bc  f04f0b01          MOV      r11,#1                ;110
;;;170    			num_algorithms++;
0000c0  bf18              IT       NE
0000c2  2401              MOVNE    r4,#1
0000c4  980a              LDR      r0,[sp,#0x28]         ;169
0000c6  f0100f02          TST      r0,#2                 ;169
0000ca  bf18              IT       NE                    ;169
0000cc  1c64              ADDNE    r4,r4,#1              ;169
0000ce  980a              LDR      r0,[sp,#0x28]         ;169
0000d0  f0100f04          TST      r0,#4                 ;169
0000d4  bf18              IT       NE                    ;169
0000d6  1c64              ADDNE    r4,r4,#1              ;169
;;;171    	}
;;;172    	for (i=0 ; i<MULTITHREAD; i++) 
;;;173    		results[i].size=results[i].size/num_algorithms;
0000d8  9808              LDR      r0,[sp,#0x20]
0000da  fbb0f0f4          UDIV     r0,r0,r4
;;;174    	/* Assign pointers */
;;;175    	for (i=0; i<NUM_ALGORITHMS; i++) {
;;;176    		ee_u32 ctx;
;;;177    		if ((1<<(ee_u32)i) & results[0].execs) {
0000de  9008              STR      r0,[sp,#0x20]
0000e0  980a              LDR      r0,[sp,#0x28]
0000e2  f0100f01          TST      r0,#1
0000e6  d006              BEQ      |L2.246|
;;;178    			for (ctx=0 ; ctx<MULTITHREAD; ctx++)
;;;179    				results[ctx].memblock[i+1]=(char *)(results[ctx].memblock[0])+results[0].size*j;
0000e8  9908              LDR      r1,[sp,#0x20]
0000ea  9804              LDR      r0,[sp,#0x10]
0000ec  fb010007          MLA      r0,r1,r7,r0
;;;180    			j++;
0000f0  f04f0701          MOV      r7,#1
0000f4  9005              STR      r0,[sp,#0x14]
                  |L2.246|
0000f6  980a              LDR      r0,[sp,#0x28]         ;177
0000f8  f0100f02          TST      r0,#2                 ;177
0000fc  d006              BEQ      |L2.268|
0000fe  9908              LDR      r1,[sp,#0x20]         ;179
000100  9804              LDR      r0,[sp,#0x10]         ;179
000102  fb010007          MLA      r0,r1,r7,r0           ;179
000106  f1070701          ADD      r7,r7,#1              ;179
00010a  9006              STR      r0,[sp,#0x18]         ;179
                  |L2.268|
00010c  980a              LDR      r0,[sp,#0x28]         ;177
00010e  f0100f04          TST      r0,#4                 ;177
000112  d004              BEQ      |L2.286|
000114  9908              LDR      r1,[sp,#0x20]         ;179
000116  9804              LDR      r0,[sp,#0x10]         ;179
000118  fb010007          MLA      r0,r1,r7,r0           ;179
00011c  9007              STR      r0,[sp,#0x1c]         ;179
                  |L2.286|
;;;181    		}
;;;182    	}
;;;183    	/* call inits */
;;;184    	for (i=0 ; i<MULTITHREAD; i++) {
00011e  f04f0700          MOV      r7,#0
;;;185    		if (results[i].execs & ID_LIST) {
000122  bf00              NOP      
                  |L2.292|
000124  eb071907          ADD      r9,r7,r7,LSL #4
000128  eb050489          ADD      r4,r5,r9,LSL #2
00012c  f8940020          LDRB     r0,[r4,#0x20]
000130  f0100f01          TST      r0,#1
000134  d006              BEQ      |L2.324|
;;;186    			results[i].list=core_list_init(results[0].size,results[i].memblock[1],results[i].seed1);
000136  f9352029          LDRSH    r2,[r5,r9,LSL #2]
00013a  68e1              LDR      r1,[r4,#0xc]
00013c  9808              LDR      r0,[sp,#0x20]
00013e  f7fffffe          BL       core_list_init
000142  6260              STR      r0,[r4,#0x24]
                  |L2.324|
;;;187    		}
;;;188    		if (results[i].execs & ID_MATRIX) {
000144  f8940020          LDRB     r0,[r4,#0x20]
000148  f0100f02          TST      r0,#2
00014c  d00a              BEQ      |L2.356|
;;;189    			core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat) );
00014e  f9350029          LDRSH    r0,[r5,r9,LSL #2]
000152  8861              LDRH     r1,[r4,#2]
000154  f1040328          ADD      r3,r4,#0x28
000158  ea404201          ORR      r2,r0,r1,LSL #16
00015c  6921              LDR      r1,[r4,#0x10]
00015e  9808              LDR      r0,[sp,#0x20]
000160  f7fffffe          BL       core_init_matrix
                  |L2.356|
;;;190    		}
;;;191    		if (results[i].execs & ID_STATE) {
000164  f8940020          LDRB     r0,[r4,#0x20]
000168  f0100f04          TST      r0,#4
00016c  d005              BEQ      |L2.378|
;;;192    			core_init_state(results[0].size,results[i].seed1,results[i].memblock[3]);
00016e  f9351029          LDRSH    r1,[r5,r9,LSL #2]
000172  6962              LDR      r2,[r4,#0x14]
000174  9808              LDR      r0,[sp,#0x20]
000176  f7fffffe          BL       core_init_state
                  |L2.378|
00017a  1c78              ADDS     r0,r7,#1
00017c  0407              LSLS     r7,r0,#16
00017e  0c3f              LSRS     r7,r7,#16
000180  d0d0              BEQ      |L2.292|
;;;193    		}
;;;194    	}
;;;195    	
;;;196    	/* automatically determine number of iterations if not set */
;;;197    	if (results[0].iterations==0) { 
;;;198    		secs_ret secs_passed=0;
000182  ed9fabb7          VLDR     d10,|L2.1120|
000186  9809              LDR      r0,[sp,#0x24]         ;197
000188  2800              CMP      r0,#0                 ;197
00018a  d154              BNE      |L2.566|
00018c  eeb08a4a          VMOV.F32 s16,s20
000190  eef08a6a          VMOV.F32 s17,s21
;;;199    		ee_u32 divisor;
;;;200    		results[0].iterations=1;
;;;201    		while (secs_passed < (secs_ret)1) {
;;;202    			results[0].iterations*=10;
;;;203    			start_time();
;;;204    			iterate(&results[0]);
;;;205    			stop_time();
;;;206    			secs_passed=time_in_secs(get_time());
000194  ed9f9bb4          VLDR     d9,|L2.1128|
000198  f8cdb024          STR      r11,[sp,#0x24]        ;201
00019c  e036              B        |L2.524|
                  |L2.414|
00019e  9809              LDR      r0,[sp,#0x24]         ;202
0001a0  eb000080          ADD      r0,r0,r0,LSL #2       ;202
0001a4  0040              LSLS     r0,r0,#1              ;202
0001a6  9009              STR      r0,[sp,#0x24]         ;203
0001a8  f7fffffe          BL       start_time
0001ac  f8dd9024          LDR      r9,[sp,#0x24]         ;203
0001b0  f8ada040          STRH     r10,[sp,#0x40]        ;203
0001b4  f8ada044          STRH     r10,[sp,#0x44]        ;203
0001b8  2700              MOVS     r7,#0                 ;203
0001ba  ac02              ADD      r4,sp,#8              ;204
0001bc  f8ada042          STRH     r10,[sp,#0x42]        ;204
0001c0  f8ada046          STRH     r10,[sp,#0x46]        ;204
0001c4  f1b90f00          CMP      r9,#0                 ;204
0001c8  d916              BLS      |L2.504|
                  |L2.458|
0001ca  2101              MOVS     r1,#1                 ;204
0001cc  4620              MOV      r0,r4                 ;204
0001ce  f7fffffe          BL       core_bench_list
0001d2  8f21              LDRH     r1,[r4,#0x38]         ;204
0001d4  f7fffffe          BL       crcu16
0001d8  8720              STRH     r0,[r4,#0x38]         ;204
0001da  f04f31ff          MOV      r1,#0xffffffff        ;204
0001de  4620              MOV      r0,r4                 ;204
0001e0  f7fffffe          BL       core_bench_list
0001e4  8f21              LDRH     r1,[r4,#0x38]         ;204
0001e6  f7fffffe          BL       crcu16
0001ea  8720              STRH     r0,[r4,#0x38]         ;204
0001ec  2f00              CMP      r7,#0                 ;204
0001ee  bf08              IT       EQ                    ;204
0001f0  8760              STRHEQ   r0,[r4,#0x3a]         ;204
0001f2  1c7f              ADDS     r7,r7,#1              ;204
0001f4  454f              CMP      r7,r9                 ;204
0001f6  d3e8              BCC      |L2.458|
                  |L2.504|
0001f8  f7fffffe          BL       stop_time
0001fc  f7fffffe          BL       get_time
000200  f7fffffe          BL       time_in_secs
000204  eeb08a40          VMOV.F32 s16,s0
000208  eef08a60          VMOV.F32 s17,s1
                  |L2.524|
00020c  ec532b19          VMOV     r2,r3,d9
000210  ec510b18          VMOV     r0,r1,d8
000214  f7fffffe          BL       __aeabi_cdcmple
000218  d3c1              BCC      |L2.414|
;;;207    		}
;;;208    		/* now we know it executes for at least 1 sec, set actual run time at about 10 secs */
;;;209    		divisor=(ee_u32)secs_passed;
00021a  ec510b18          VMOV     r0,r1,d8
00021e  f7fffffe          BL       __aeabi_d2uiz
;;;210    		if (divisor==0) /* some machines cast float to int as 0 since this conversion is not defined by ANSI, but we know at least one second passed */
000222  2800              CMP      r0,#0
;;;211    			divisor=1;
000224  bf08              IT       EQ
000226  2001              MOVEQ    r0,#1
;;;212    		results[0].iterations*=1+10/divisor;
000228  210a              MOVS     r1,#0xa
00022a  fbb1f0f0          UDIV     r0,r1,r0
00022e  9909              LDR      r1,[sp,#0x24]
000230  1c40              ADDS     r0,r0,#1
000232  4348              MULS     r0,r1,r0
000234  9009              STR      r0,[sp,#0x24]
                  |L2.566|
;;;213    	}
;;;214    	/* perform actual benchmark */
;;;215    	start_time();
000236  f7fffffe          BL       start_time
00023a  9f09              LDR      r7,[sp,#0x24]
00023c  f8ada040          STRH     r10,[sp,#0x40]
000240  f8ada044          STRH     r10,[sp,#0x44]
;;;216    #if (MULTITHREAD>1)
;;;217    	if (default_num_contexts>MULTITHREAD) {
;;;218    		default_num_contexts=MULTITHREAD;
;;;219    	}
;;;220    	for (i=0 ; i<default_num_contexts; i++) {
;;;221    		results[i].iterations=results[0].iterations;
;;;222    		results[i].execs=results[0].execs;
;;;223    		core_start_parallel(&results[i]);
;;;224    	}
;;;225    	for (i=0 ; i<default_num_contexts; i++) {
;;;226    		core_stop_parallel(&results[i]);
;;;227    	}
;;;228    #else
;;;229    	iterate(&results[0]);
000244  ac02              ADD      r4,sp,#8
000246  f8ada042          STRH     r10,[sp,#0x42]
00024a  f8ada046          STRH     r10,[sp,#0x46]
00024e  f04f0900          MOV      r9,#0
000252  2f00              CMP      r7,#0
000254  d918              BLS      |L2.648|
                  |L2.598|
000256  2101              MOVS     r1,#1
000258  4620              MOV      r0,r4
00025a  f7fffffe          BL       core_bench_list
00025e  8f21              LDRH     r1,[r4,#0x38]
000260  f7fffffe          BL       crcu16
000264  8720              STRH     r0,[r4,#0x38]
000266  f04f31ff          MOV      r1,#0xffffffff
00026a  4620              MOV      r0,r4
00026c  f7fffffe          BL       core_bench_list
000270  8f21              LDRH     r1,[r4,#0x38]
000272  f7fffffe          BL       crcu16
000276  8720              STRH     r0,[r4,#0x38]
000278  f1b90f00          CMP      r9,#0
00027c  bf08              IT       EQ
00027e  8760              STRHEQ   r0,[r4,#0x3a]
000280  f1090901          ADD      r9,r9,#1
000284  45b9              CMP      r9,r7
000286  d3e6              BCC      |L2.598|
                  |L2.648|
;;;230    #endif
;;;231    	stop_time();
000288  f7fffffe          BL       stop_time
;;;232    	total_time=get_time();
00028c  f7fffffe          BL       get_time
;;;233    	/* get a function of the input to report */
;;;234    	seedcrc=crc16(results[0].seed1,seedcrc);
000290  9000              STR      r0,[sp,#0]
000292  f9bd0008          LDRSH    r0,[sp,#8]
000296  2100              MOVS     r1,#0
000298  f7fffffe          BL       crc16
;;;235    	seedcrc=crc16(results[0].seed2,seedcrc);
00029c  f9bd200a          LDRSH    r2,[sp,#0xa]
0002a0  4601              MOV      r1,r0
0002a2  4610              MOV      r0,r2
0002a4  f7fffffe          BL       crc16
;;;236    	seedcrc=crc16(results[0].seed3,seedcrc);
0002a8  f9bd200c          LDRSH    r2,[sp,#0xc]
0002ac  4601              MOV      r1,r0
0002ae  4610              MOV      r0,r2
0002b0  f7fffffe          BL       crc16
0002b4  4601              MOV      r1,r0
;;;237    	seedcrc=crc16(results[0].size,seedcrc);
0002b6  9808              LDR      r0,[sp,#0x20]
0002b8  b200              SXTH     r0,r0
0002ba  f7fffffe          BL       crc16
;;;238    	
;;;239    	switch (seedcrc) { /* test known output for common seeds */
0002be  f6473205          MOV      r2,#0x7b05
0002c2  1a81              SUBS     r1,r0,r2
;;;240    		case 0x8a02: /* seed1=0, seed2=0, seed3=0x66, size 2000 per algorithm */
;;;241    			known_id=0;
;;;242    			ee_printf("6k performance run parameters for coremark.\n");
;;;243    			break;
;;;244    		case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
;;;245    			known_id=1;
;;;246    			ee_printf("6k validation run parameters for coremark.\n");
;;;247    			break;
;;;248    		case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
;;;249    			known_id=2;
;;;250    			ee_printf("Profile generation run parameters for coremark.\n");
;;;251    			break;
;;;252    		case 0xe9f5: /* seed1=0, seed2=0, seed3=0x66, size 666 per algorithm */
;;;253    			known_id=3;
;;;254    			ee_printf("2K performance run parameters for coremark.\n");
;;;255    			break;
;;;256    		case 0x18f2: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 666 per algorithm */
;;;257    			known_id=4;
;;;258    			ee_printf("2K validation run parameters for coremark.\n");
;;;259    			break;
;;;260    		default:
;;;261    			total_errors=-1;
;;;262    			break;
;;;263    	}
;;;264    	if (known_id>=0) {
;;;265    		for (i=0 ; i<default_num_contexts; i++) {
0002c4  f8df91a8          LDR      r9,|L2.1136|
0002c8  9001              STR      r0,[sp,#4]            ;239
0002ca  4290              CMP      r0,r2                 ;239
0002cc  bf04              ITT      EQ                    ;245
0002ce  2601              MOVEQ    r6,#1                 ;245
0002d0  a068              ADREQ    r0,|L2.1140|
0002d2  d024              BEQ      |L2.798|
0002d4  dc10              BGT      |L2.760|
0002d6  f200700e          ADD      r0,r0,#0x70e          ;239
0002da  f5b05000          SUBS     r0,r0,#0x2000         ;239
0002de  bf04              ITT      EQ                    ;257
0002e0  2604              MOVEQ    r6,#4                 ;257
0002e2  a06f              ADREQ    r0,|L2.1184|
0002e4  d01b              BEQ      |L2.798|
0002e6  f6002043          ADD      r0,r0,#0xa43          ;239
0002ea  f5b04f80          CMP      r0,#0x4000            ;239
0002ee  bf04              ITT      EQ                    ;249
0002f0  2602              MOVEQ    r6,#2                 ;249
0002f2  a076              ADREQ    r0,|L2.1228|
0002f4  d013              BEQ      |L2.798|
0002f6  e00a              B        |L2.782|
                  |L2.760|
0002f8  f5a16060          SUB      r0,r1,#0xe00          ;239
0002fc  38fd              SUBS     r0,r0,#0xfd           ;239
0002fe  d009              BEQ      |L2.788|
000300  300d              ADDS     r0,r0,#0xd            ;239
000302  f5b04fc0          CMP      r0,#0x6000            ;239
000306  bf04              ITT      EQ                    ;253
000308  2603              MOVEQ    r6,#3                 ;253
00030a  a07d              ADREQ    r0,|L2.1280|
00030c  d007              BEQ      |L2.798|
                  |L2.782|
00030e  f04f38ff          MOV      r8,#0xffffffff        ;261
000312  e05b              B        |L2.972|
                  |L2.788|
000314  2600              MOVS     r6,#0                 ;241
000316  a086              ADR      r0,|L2.1328|
000318  f7fffffe          BL       __2printf
00031c  e001              B        |L2.802|
                  |L2.798|
00031e  f7fffffe          BL       __2printf
                  |L2.802|
000322  f8d90000          LDR      r0,[r9,#0]  ; default_num_contexts
000326  2800              CMP      r0,#0
000328  bf18              IT       NE
00032a  2700              MOVNE    r7,#0
;;;266    			results[i].err=0;
;;;267    			if ((results[i].execs & ID_LIST) && 
00032c  bf88              IT       HI
00032e  f8dfb230          LDRHI    r11,|L2.1376|
000332  d94b              BLS      |L2.972|
                  |L2.820|
000334  eb071007          ADD      r0,r7,r7,LSL #4       ;266
000338  eb050480          ADD      r4,r5,r0,LSL #2       ;266
00033c  f8a4a040          STRH     r10,[r4,#0x40]        ;266
000340  f8940020          LDRB     r0,[r4,#0x20]
000344  f0100f01          TST      r0,#1
000348  d00d              BEQ      |L2.870|
00034a  8f62              LDRH     r2,[r4,#0x3a]
00034c  f83b3016          LDRH     r3,[r11,r6,LSL #1]
000350  429a              CMP      r2,r3
000352  d008              BEQ      |L2.870|
;;;268    				(results[i].crclist!=list_known_crc[known_id])) {
;;;269    				ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",i,results[i].crclist,list_known_crc[known_id]);
000354  4639              MOV      r1,r7
000356  a083              ADR      r0,|L2.1380|
000358  f7fffffe          BL       __2printf
;;;270    				results[i].err++;
00035c  f8b40040          LDRH     r0,[r4,#0x40]
000360  1c40              ADDS     r0,r0,#1
000362  f8a40040          STRH     r0,[r4,#0x40]
                  |L2.870|
;;;271    			}
;;;272    			if ((results[i].execs & ID_MATRIX) &&
000366  f8940020          LDRB     r0,[r4,#0x20]
00036a  f0100f02          TST      r0,#2
00036e  d00e              BEQ      |L2.910|
000370  4888              LDR      r0,|L2.1428|
000372  8fa2              LDRH     r2,[r4,#0x3c]
000374  f8303016          LDRH     r3,[r0,r6,LSL #1]
000378  429a              CMP      r2,r3
00037a  d008              BEQ      |L2.910|
;;;273    				(results[i].crcmatrix!=matrix_known_crc[known_id])) {
;;;274    				ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",i,results[i].crcmatrix,matrix_known_crc[known_id]);
00037c  4639              MOV      r1,r7
00037e  a086              ADR      r0,|L2.1432|
000380  f7fffffe          BL       __2printf
;;;275    				results[i].err++;
000384  f8b40040          LDRH     r0,[r4,#0x40]
000388  1c40              ADDS     r0,r0,#1
00038a  f8a40040          STRH     r0,[r4,#0x40]
                  |L2.910|
;;;276    			}
;;;277    			if ((results[i].execs & ID_STATE) &&
00038e  f8940020          LDRB     r0,[r4,#0x20]
000392  f0100f04          TST      r0,#4
000396  d00e              BEQ      |L2.950|
000398  488c              LDR      r0,|L2.1484|
00039a  8fe2              LDRH     r2,[r4,#0x3e]
00039c  f8303016          LDRH     r3,[r0,r6,LSL #1]
0003a0  429a              CMP      r2,r3
0003a2  d008              BEQ      |L2.950|
;;;278    				(results[i].crcstate!=state_known_crc[known_id])) {
;;;279    				ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",i,results[i].crcstate,state_known_crc[known_id]);
0003a4  4639              MOV      r1,r7
0003a6  a08a              ADR      r0,|L2.1488|
0003a8  f7fffffe          BL       __2printf
;;;280    				results[i].err++;
0003ac  f8b40040          LDRH     r0,[r4,#0x40]
0003b0  1c40              ADDS     r0,r0,#1
0003b2  f8a40040          STRH     r0,[r4,#0x40]
                  |L2.950|
;;;281    			}
;;;282    			total_errors+=results[i].err;
0003b6  f8b40040          LDRH     r0,[r4,#0x40]
0003ba  4440              ADD      r0,r0,r8
0003bc  fa0ff880          SXTH     r8,r0
0003c0  1c78              ADDS     r0,r7,#1
0003c2  b287              UXTH     r7,r0
0003c4  f8d90000          LDR      r0,[r9,#0]  ; default_num_contexts
0003c8  4287              CMP      r7,r0
0003ca  d3b3              BCC      |L2.820|
                  |L2.972|
;;;283    		}
;;;284    	}
;;;285    	total_errors+=check_data_types();
0003cc  f7fffffe          BL       check_data_types
0003d0  4440              ADD      r0,r0,r8
0003d2  b207              SXTH     r7,r0
;;;286    	/* and report results */
;;;287    	ee_printf("CoreMark Size    : %lu\n", (long unsigned) results[0].size);
0003d4  a08a              ADR      r0,|L2.1536|
0003d6  9908              LDR      r1,[sp,#0x20]
0003d8  f7fffffe          BL       __2printf
;;;288    	ee_printf("Total ticks      : %lu\n", (long unsigned) total_time);
0003dc  a08e              ADR      r0,|L2.1560|
0003de  9900              LDR      r1,[sp,#0]
0003e0  f7fffffe          BL       __2printf
;;;289    #if HAS_FLOAT
;;;290    	ee_printf("Total time (secs): %f\n",time_in_secs(total_time));
0003e4  9800              LDR      r0,[sp,#0]
0003e6  f7fffffe          BL       time_in_secs
0003ea  ec532b10          VMOV     r2,r3,d0
0003ee  a090              ADR      r0,|L2.1584|
0003f0  f7fffffe          BL       __2printf
;;;291    	if (time_in_secs(total_time) > 0)
0003f4  9800              LDR      r0,[sp,#0]
0003f6  f7fffffe          BL       time_in_secs
0003fa  ec532b1a          VMOV     r2,r3,d10
0003fe  ec510b10          VMOV     r0,r1,d0
000402  f7fffffe          BL       __aeabi_cdrcmple
000406  d217              BCS      |L2.1080|
;;;292    		ee_printf("Iterations/Sec   : %f\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
000408  9800              LDR      r0,[sp,#0]
00040a  f7fffffe          BL       time_in_secs
00040e  9809              LDR      r0,[sp,#0x24]
000410  f8d91000          LDR      r1,[r9,#0]  ; default_num_contexts
000414  eeb08a40          VMOV.F32 s16,s0
000418  eef08a60          VMOV.F32 s17,s1
00041c  4348              MULS     r0,r1,r0
00041e  f7fffffe          BL       __aeabi_ui2d
000422  ec532b18          VMOV     r2,r3,d8
000426  f7fffffe          BL       __aeabi_ddiv
00042a  ec410b10          VMOV     d0,r0,r1
00042e  a086              ADR      r0,|L2.1608|
000430  ec532b10          VMOV     r2,r3,d0
000434  f7fffffe          BL       __2printf
                  |L2.1080|
;;;293    #else 
;;;294    	ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
;;;295    	if (time_in_secs(total_time) > 0)
;;;296    		ee_printf("Iterations/Sec   : %d\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
;;;297    #endif
;;;298    	if (time_in_secs(total_time) < 10) {
000438  9800              LDR      r0,[sp,#0]
00043a  f7fffffe          BL       time_in_secs
00043e  ed9f1b88          VLDR     d1,|L2.1632|
000442  ec510b10          VMOV     r0,r1,d0
000446  ec532b11          VMOV     r2,r3,d1
00044a  f7fffffe          BL       __aeabi_cdcmple
00044e  d200              BCS      |L2.1106|
;;;299    		ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
000450  e10a              B        |L2.1640|
                  |L2.1106|
000452  e10e              B        |L2.1650|
                          DCD      0x00000000
                  |L2.1112|
                          DCD      ||.bss||
                          DCD      0x00000000
                  |L2.1120|
000460  00000000          DCFD     0x0000000000000000 ; 0
000464  00000000
                  |L2.1128|
000468  00000000          DCFD     0x3ff0000000000000 ; 1
00046c  3ff00000
                  |L2.1136|
                          DCD      default_num_contexts
                  |L2.1140|
000474  366b2076          DCB      "6k validation run parameters for coremark.\n",0
000478  616c6964
00047c  6174696f
000480  6e207275
000484  6e207061
000488  72616d65
00048c  74657273
000490  20666f72
000494  20636f72
000498  656d6172
00049c  6b2e0a00
                  |L2.1184|
0004a0  324b2076          DCB      "2K validation run parameters for coremark.\n",0
0004a4  616c6964
0004a8  6174696f
0004ac  6e207275
0004b0  6e207061
0004b4  72616d65
0004b8  74657273
0004bc  20666f72
0004c0  20636f72
0004c4  656d6172
0004c8  6b2e0a00
                  |L2.1228|
0004cc  50726f66          DCB      "Profile generation run parameters for coremark.\n",0
0004d0  696c6520
0004d4  67656e65
0004d8  72617469
0004dc  6f6e2072
0004e0  756e2070
0004e4  6172616d
0004e8  65746572
0004ec  7320666f
0004f0  7220636f
0004f4  72656d61
0004f8  726b2e0a
0004fc  00      
0004fd  00                DCB      0
0004fe  00                DCB      0
0004ff  00                DCB      0
                  |L2.1280|
000500  324b2070          DCB      "2K performance run parameters for coremark.\n",0
000504  6572666f
000508  726d616e
00050c  63652072
000510  756e2070
000514  6172616d
000518  65746572
00051c  7320666f
000520  7220636f
000524  72656d61
000528  726b2e0a
00052c  00      
00052d  00                DCB      0
00052e  00                DCB      0
00052f  00                DCB      0
                  |L2.1328|
000530  366b2070          DCB      "6k performance run parameters for coremark.\n",0
000534  6572666f
000538  726d616e
00053c  63652072
000540  756e2070
000544  6172616d
000548  65746572
00054c  7320666f
000550  7220636f
000554  72656d61
000558  726b2e0a
00055c  00      
00055d  00                DCB      0
00055e  00                DCB      0
00055f  00                DCB      0
                  |L2.1376|
                          DCD      ||.data||
                  |L2.1380|
000564  5b25755d          DCB      "[%u]ERROR! list crc 0x%04x - should be 0x%04x\n",0
000568  4552524f
00056c  5221206c
000570  69737420
000574  63726320
000578  30782530
00057c  3478202d
000580  2073686f
000584  756c6420
000588  62652030
00058c  78253034
000590  780a00  
000593  00                DCB      0
                  |L2.1428|
                          DCD      ||.data||+0xa
                  |L2.1432|
000598  5b25755d          DCB      "[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n",0
00059c  4552524f
0005a0  5221206d
0005a4  61747269
0005a8  78206372
0005ac  63203078
0005b0  25303478
0005b4  202d2073
0005b8  686f756c
0005bc  64206265
0005c0  20307825
0005c4  3034780a
0005c8  00      
0005c9  00                DCB      0
0005ca  00                DCB      0
0005cb  00                DCB      0
                  |L2.1484|
                          DCD      ||.data||+0x14
                  |L2.1488|
0005d0  5b25755d          DCB      "[%u]ERROR! state crc 0x%04x - should be 0x%04x\n",0
0005d4  4552524f
0005d8  52212073
0005dc  74617465
0005e0  20637263
0005e4  20307825
0005e8  30347820
0005ec  2d207368
0005f0  6f756c64
0005f4  20626520
0005f8  30782530
0005fc  34780a00
                  |L2.1536|
000600  436f7265          DCB      "CoreMark Size    : %lu\n",0
000604  4d61726b
000608  2053697a
00060c  65202020
000610  203a2025
000614  6c750a00
                  |L2.1560|
000618  546f7461          DCB      "Total ticks      : %lu\n",0
00061c  6c207469
000620  636b7320
000624  20202020
000628  203a2025
00062c  6c750a00
                  |L2.1584|
000630  546f7461          DCB      "Total time (secs): %f\n",0
000634  6c207469
000638  6d652028
00063c  73656373
000640  293a2025
000644  660a00  
000647  00                DCB      0
                  |L2.1608|
000648  49746572          DCB      "Iterations/Sec   : %f\n",0
00064c  6174696f
000650  6e732f53
000654  65632020
000658  203a2025
00065c  660a00  
00065f  00                DCB      0
                  |L2.1632|
000660  00000000          DCFD     0x4024000000000000 ; 10
000664  40240000
                  |L2.1640|
000668  a05c              ADR      r0,|L2.2012|
00066a  f7fffffe          BL       __2printf
;;;300    		total_errors++;
00066e  1c78              ADDS     r0,r7,#1
000670  b207              SXTH     r7,r0
                  |L2.1650|
;;;301    	}
;;;302    
;;;303    	ee_printf("Iterations       : %lu\n", (long unsigned) default_num_contexts*results[0].iterations);
000672  9809              LDR      r0,[sp,#0x24]
000674  f8d91000          LDR      r1,[r9,#0]  ; default_num_contexts
000678  4341              MULS     r1,r0,r1
00067a  a068              ADR      r0,|L2.2076|
00067c  f7fffffe          BL       __2printf
;;;304    	ee_printf("Compiler version : %s\n",COMPILER_VERSION);
000680  a16c              ADR      r1,|L2.2100|
000682  a071              ADR      r0,|L2.2120|
000684  f7fffffe          BL       __2printf
;;;305    	ee_printf("Compiler flags   : %s\n",COMPILER_FLAGS);
000688  a175              ADR      r1,|L2.2144|
00068a  a080              ADR      r0,|L2.2188|
00068c  f7fffffe          BL       __2printf
;;;306    #if (MULTITHREAD>1)
;;;307    	ee_printf("Parallel %s : %d\n",PARALLEL_METHOD,default_num_contexts);
;;;308    #endif
;;;309    	ee_printf("Memory location  : %s\n",MEM_LOCATION);
000690  a184              ADR      r1,|L2.2212|
000692  a086              ADR      r0,|L2.2220|
000694  f7fffffe          BL       __2printf
;;;310    	/* output for verification */
;;;311    	ee_printf("seedcrc          : 0x%04x\n",seedcrc);
000698  a08a              ADR      r0,|L2.2244|
00069a  9901              LDR      r1,[sp,#4]
00069c  f7fffffe          BL       __2printf
;;;312    	if (results[0].execs & ID_LIST)
0006a0  980a              LDR      r0,[sp,#0x28]
0006a2  f0100f01          TST      r0,#1
;;;313    		for (i=0 ; i<default_num_contexts; i++) 
0006a6  bf1e              ITTT     NE
0006a8  f8d90000          LDRNE    r0,[r9,#0]  ; default_num_contexts
0006ac  2800              CMPNE    r0,#0
0006ae  2400              MOVNE    r4,#0
0006b0  d90f              BLS      |L2.1746|
;;;314    			ee_printf("[%d]crclist       : 0x%04x\n",i,results[i].crclist);
0006b2  bf00              NOP      
                  |L2.1716|
0006b4  eb041004          ADD      r0,r4,r4,LSL #4
0006b8  eb050080          ADD      r0,r5,r0,LSL #2
0006bc  4621              MOV      r1,r4
0006be  8f42              LDRH     r2,[r0,#0x3a]
0006c0  a087              ADR      r0,|L2.2272|
0006c2  f7fffffe          BL       __2printf
0006c6  1c60              ADDS     r0,r4,#1
0006c8  b284              UXTH     r4,r0
0006ca  f8d90000          LDR      r0,[r9,#0]  ; default_num_contexts
0006ce  42a0              CMP      r0,r4
0006d0  d8f0              BHI      |L2.1716|
                  |L2.1746|
;;;315    	if (results[0].execs & ID_MATRIX) 
0006d2  980a              LDR      r0,[sp,#0x28]
0006d4  f0100f02          TST      r0,#2
;;;316    		for (i=0 ; i<default_num_contexts; i++) 
0006d8  bf1e              ITTT     NE
0006da  f8d90000          LDRNE    r0,[r9,#0]  ; default_num_contexts
0006de  2800              CMPNE    r0,#0
0006e0  2400              MOVNE    r4,#0
0006e2  d90e              BLS      |L2.1794|
                  |L2.1764|
;;;317    			ee_printf("[%d]crcmatrix     : 0x%04x\n",i,results[i].crcmatrix);
0006e4  eb041004          ADD      r0,r4,r4,LSL #4
0006e8  eb050080          ADD      r0,r5,r0,LSL #2
0006ec  4621              MOV      r1,r4
0006ee  8f82              LDRH     r2,[r0,#0x3c]
0006f0  a082              ADR      r0,|L2.2300|
0006f2  f7fffffe          BL       __2printf
0006f6  1c60              ADDS     r0,r4,#1
0006f8  b284              UXTH     r4,r0
0006fa  f8d90000          LDR      r0,[r9,#0]  ; default_num_contexts
0006fe  42a0              CMP      r0,r4
000700  d8f0              BHI      |L2.1764|
                  |L2.1794|
;;;318    	if (results[0].execs & ID_STATE)
000702  980a              LDR      r0,[sp,#0x28]
000704  f0100f04          TST      r0,#4
000708  d015              BEQ      |L2.1846|
;;;319    		for (i=0 ; i<default_num_contexts; i++) 
00070a  f8d90000          LDR      r0,[r9,#0]  ; default_num_contexts
00070e  2800              CMP      r0,#0
000710  bf18              IT       NE
000712  2400              MOVNE    r4,#0
000714  d025              BEQ      |L2.1890|
000716  d911              BLS      |L2.1852|
                  |L2.1816|
;;;320    			ee_printf("[%d]crcstate      : 0x%04x\n",i,results[i].crcstate);
000718  eb041004          ADD      r0,r4,r4,LSL #4
00071c  eb050080          ADD      r0,r5,r0,LSL #2
000720  4621              MOV      r1,r4
000722  8fc2              LDRH     r2,[r0,#0x3e]
000724  a07c              ADR      r0,|L2.2328|
000726  f7fffffe          BL       __2printf
00072a  1c60              ADDS     r0,r4,#1
00072c  b284              UXTH     r4,r0
00072e  f8d90000          LDR      r0,[r9,#0]  ; default_num_contexts
000732  42a0              CMP      r0,r4
000734  d8f0              BHI      |L2.1816|
                  |L2.1846|
;;;321    	for (i=0 ; i<default_num_contexts; i++) 
000736  f8d90000          LDR      r0,[r9,#0]  ; default_num_contexts
00073a  b190              CBZ      r0,|L2.1890|
                  |L2.1852|
00073c  2400              MOVS     r4,#0
00073e  2800              CMP      r0,#0
000740  d90f              BLS      |L2.1890|
;;;322    		ee_printf("[%d]crcfinal      : 0x%04x\n",i,results[i].crc);
000742  bf00              NOP      
                  |L2.1860|
000744  eb041004          ADD      r0,r4,r4,LSL #4
000748  eb050080          ADD      r0,r5,r0,LSL #2
00074c  4621              MOV      r1,r4
00074e  8f02              LDRH     r2,[r0,#0x38]
000750  a078              ADR      r0,|L2.2356|
000752  f7fffffe          BL       __2printf
000756  1c60              ADDS     r0,r4,#1
000758  b284              UXTH     r4,r0
00075a  f8d90000          LDR      r0,[r9,#0]  ; default_num_contexts
00075e  42a0              CMP      r0,r4
000760  d8f0              BHI      |L2.1860|
                  |L2.1890|
;;;323    	if (total_errors==0) {
000762  2f00              CMP      r7,#0
;;;324    		ee_printf("Correct operation validated. See README.md for run and reporting rules.\n");
;;;325    #if HAS_FLOAT
;;;326    		if (known_id==3) {
;;;327    			ee_printf("CoreMark 1.0 : %f / %s %s",default_num_contexts*results[0].iterations/time_in_secs(total_time),COMPILER_VERSION,COMPILER_FLAGS);
;;;328    #if defined(MEM_LOCATION) && !defined(MEM_LOCATION_UNSPEC)
;;;329    			ee_printf(" / %s",MEM_LOCATION);
;;;330    #else
;;;331    			ee_printf(" / %s",mem_name[MEM_METHOD]);
;;;332    #endif
;;;333    
;;;334    #if (MULTITHREAD>1)
;;;335    			ee_printf(" / %d:%s",default_num_contexts,PARALLEL_METHOD);
;;;336    #endif
;;;337    			ee_printf("\n");
;;;338    		}
;;;339    #endif
;;;340    	}
;;;341    	if (total_errors>0)
;;;342    		ee_printf("Errors detected\n");
000764  bfc8              IT       GT
000766  a07a              ADRGT    r0,|L2.2384|
000768  d003              BEQ      |L2.1906|
00076a  dd29              BLE      |L2.1984|
                  |L2.1900|
00076c  f7fffffe          BL       __2printf
000770  e029              B        |L2.1990|
                  |L2.1906|
000772  487c              LDR      r0,|L2.2404|
000774  f7fffffe          BL       __2printf
000778  2e03              CMP      r6,#3                 ;326
00077a  d124              BNE      |L2.1990|
00077c  9800              LDR      r0,[sp,#0]            ;327
00077e  f7fffffe          BL       time_in_secs
000782  9809              LDR      r0,[sp,#0x24]         ;327
000784  f8d91000          LDR      r1,[r9,#0]            ;327  ; default_num_contexts
000788  eeb08a40          VMOV.F32 s16,s0                ;327
00078c  eef08a60          VMOV.F32 s17,s1                ;327
000790  4348              MULS     r0,r1,r0              ;327
000792  f7fffffe          BL       __aeabi_ui2d
000796  ec532b18          VMOV     r2,r3,d8              ;327
00079a  f7fffffe          BL       __aeabi_ddiv
00079e  ec410b10          VMOV     d0,r0,r1              ;327
0007a2  a12f              ADR      r1,|L2.2144|
0007a4  a023              ADR      r0,|L2.2100|
0007a6  e9cd0100          STRD     r0,r1,[sp,#0]         ;327
0007aa  ec532b10          VMOV     r2,r3,d0              ;327
0007ae  a06e              ADR      r0,|L2.2408|
0007b0  f7fffffe          BL       __2printf
0007b4  a13b              ADR      r1,|L2.2212|
0007b6  a073              ADR      r0,|L2.2436|
0007b8  f7fffffe          BL       __2printf
0007bc  a016              ADR      r0,|L2.2072|
0007be  e7d5              B        |L2.1900|
                  |L2.1984|
;;;343    	if (total_errors<0)
;;;344    		ee_printf("Cannot validate operation for these seed values, please compare with results on a known platform.\n");
0007c0  4872              LDR      r0,|L2.2444|
0007c2  f7fffffe          BL       __2printf
                  |L2.1990|
;;;345    
;;;346    #if (MEM_METHOD==MEM_MALLOC)
;;;347    	for (i=0 ; i<MULTITHREAD; i++) 
;;;348    		portable_free(results[i].memblock[0]);
;;;349    #endif
;;;350    	/* And last call any target specific code for finalizing */
;;;351    	portable_fini(&(results[0].port));
0007c6  f1050042          ADD      r0,r5,#0x42
0007ca  f7fffffe          BL       portable_fini
;;;352    
;;;353    	return MAIN_RETURN_VAL;	
;;;354    }
0007ce  b015              ADD      sp,sp,#0x54
0007d0  2000              MOVS     r0,#0                 ;353
0007d2  ecbd8b06          VPOP     {d8-d10}
0007d6  e8bd8ff0          POP      {r4-r11,pc}
;;;355    
                          ENDP

0007da  0000              DCW      0x0000
                  |L2.2012|
0007dc  4552524f          DCB      "ERROR! Must execute for at least 10 secs for a valid re"
0007e0  5221204d
0007e4  75737420
0007e8  65786563
0007ec  75746520
0007f0  666f7220
0007f4  6174206c
0007f8  65617374
0007fc  20313020
000800  73656373
000804  20666f72
000808  20612076
00080c  616c6964
000810  207265  
000813  73756c74          DCB      "sult!"
000817  21      
                  |L2.2072|
000818  0a00              DCB      "\n",0
00081a  00                DCB      0
00081b  00                DCB      0
                  |L2.2076|
00081c  49746572          DCB      "Iterations       : %lu\n",0
000820  6174696f
000824  6e732020
000828  20202020
00082c  203a2025
000830  6c750a00
                  |L2.2100|
000834  75566973          DCB      "uVision 5.26.2.0",0
000838  696f6e20
00083c  352e3236
000840  2e322e30
000844  00      
000845  00                DCB      0
000846  00                DCB      0
000847  00                DCB      0
                  |L2.2120|
000848  436f6d70          DCB      "Compiler version : %s\n",0
00084c  696c6572
000850  20766572
000854  73696f6e
000858  203a2025
00085c  730a00  
00085f  00                DCB      0
                  |L2.2144|
000860  2d2d6465          DCB      "--device DLM -O3 -Otime --apcs=interwork",0
000864  76696365
000868  20444c4d
00086c  202d4f33
000870  202d4f74
000874  696d6520
000878  2d2d6170
00087c  63733d69
000880  6e746572
000884  776f726b
000888  00      
000889  00                DCB      0
00088a  00                DCB      0
00088b  00                DCB      0
                  |L2.2188|
00088c  436f6d70          DCB      "Compiler flags   : %s\n",0
000890  696c6572
000894  20666c61
000898  67732020
00089c  203a2025
0008a0  730a00  
0008a3  00                DCB      0
                  |L2.2212|
0008a4  464c4153          DCB      "FLASH",0
0008a8  4800    
0008aa  00                DCB      0
0008ab  00                DCB      0
                  |L2.2220|
0008ac  4d656d6f          DCB      "Memory location  : %s\n",0
0008b0  7279206c
0008b4  6f636174
0008b8  696f6e20
0008bc  203a2025
0008c0  730a00  
0008c3  00                DCB      0
                  |L2.2244|
0008c4  73656564          DCB      "seedcrc          : 0x%04x\n",0
0008c8  63726320
0008cc  20202020
0008d0  20202020
0008d4  203a2030
0008d8  78253034
0008dc  780a00  
0008df  00                DCB      0
                  |L2.2272|
0008e0  5b25645d          DCB      "[%d]crclist       : 0x%04x\n",0
0008e4  6372636c
0008e8  69737420
0008ec  20202020
0008f0  20203a20
0008f4  30782530
0008f8  34780a00
                  |L2.2300|
0008fc  5b25645d          DCB      "[%d]crcmatrix     : 0x%04x\n",0
000900  6372636d
000904  61747269
000908  78202020
00090c  20203a20
000910  30782530
000914  34780a00
                  |L2.2328|
000918  5b25645d          DCB      "[%d]crcstate      : 0x%04x\n",0
00091c  63726373
000920  74617465
000924  20202020
000928  20203a20
00092c  30782530
000930  34780a00
                  |L2.2356|
000934  5b25645d          DCB      "[%d]crcfinal      : 0x%04x\n",0
000938  63726366
00093c  696e616c
000940  20202020
000944  20203a20
000948  30782530
00094c  34780a00
                  |L2.2384|
000950  4572726f          DCB      "Errors detected\n",0
000954  72732064
000958  65746563
00095c  7465640a
000960  00      
000961  00                DCB      0
000962  00                DCB      0
000963  00                DCB      0
                  |L2.2404|
                          DCD      ||area_number.7||
                  |L2.2408|
000968  436f7265          DCB      "CoreMark 1.0 : %f / %s %s",0
00096c  4d61726b
000970  20312e30
000974  203a2025
000978  66202f20
00097c  25732025
000980  7300    
000982  00                DCB      0
000983  00                DCB      0
                  |L2.2436|
000984  202f2025          DCB      " / %s",0
000988  7300    
00098a  00                DCB      0
00098b  00                DCB      0
                  |L2.2444|
                          DCD      ||area_number.7||+0x4c

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  static_memblk
                          %        2000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  53746174          DCB      "Static",0
000004  696300  
000007  00                DCB      0
000008  48656170          DCB      "Heap",0
00000c  00      
00000d  00                DCB      0
00000e  00                DCB      0
00000f  00                DCB      0
000010  53746163          DCB      "Stack",0
000014  6b00    

                          AREA ||area_number.7||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.conststring||
000000  436f7272          DCB      "Correct operation validated. See README.md for run and "
000004  65637420
000008  6f706572
00000c  6174696f
000010  6e207661
000014  6c696461
000018  7465642e
00001c  20536565
000020  20524541
000024  444d452e
000028  6d642066
00002c  6f722072
000030  756e2061
000034  6e6420  
000037  7265706f          DCB      "reporting rules.\n",0
00003b  7274696e
00003f  67207275
000043  6c65732e
000047  0a00    
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
00004c  43616e6e          DCB      "Cannot validate operation for these seed values, please"
000050  6f742076
000054  616c6964
000058  61746520
00005c  6f706572
000060  6174696f
000064  6e20666f
000068  72207468
00006c  65736520
000070  73656564
000074  2076616c
000078  7565732c
00007c  20706c65
000080  617365  
000083  20636f6d          DCB      " compare with results on a known platform.\n",0
000087  70617265
00008b  20776974
00008f  68207265
000093  73756c74
000097  73206f6e
00009b  2061206b
00009f  6e6f776e
0000a3  20706c61
0000a7  74666f72
0000ab  6d2e0a00

                          AREA ||.data||, DATA, ALIGN=1

                  list_known_crc
000000  d4b03340          DCW      0xd4b0,0x3340
000004  6a79e714          DCW      0x6a79,0xe714
000008  e3c1              DCW      0xe3c1
                  matrix_known_crc
00000a  be52              DCW      0xbe52
00000c  11995608          DCW      0x1199,0x5608
000010  1fd70747          DCW      0x1fd7,0x0747
                  state_known_crc
000014  5e4739bf          DCW      0x5e47,0x39bf
000018  e5a48e3a          DCW      0xe5a4,0x8e3a
00001c  8d84              DCW      0x8d84

                          AREA ||area_number.9||, DATA, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.data||
                  mem_name
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x10

                  __ARM_use_no_argv EQU 0
