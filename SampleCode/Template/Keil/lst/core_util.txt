; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\core_util.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\core_util.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -I..\Coremark -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DMAIN_HAS_NOARGC --omf_browse=.\obj\core_util.crf ..\Coremark\core_util.c]
                          THUMB

                          AREA ||i.check_data_types||, CODE, READONLY, ALIGN=1

                  check_data_types PROC
;;;179    
;;;180    ee_u8 check_data_types() {
000000  2000              MOVS     r0,#0
;;;181    	ee_u8 retval=0;
;;;182    	if (sizeof(ee_u8) != 1) {
;;;183    		ee_printf("ERROR: ee_u8 is not an 8b datatype!\n");
;;;184    		retval++;
;;;185    	}
;;;186    	if (sizeof(ee_u16) != 2) {
;;;187    		ee_printf("ERROR: ee_u16 is not a 16b datatype!\n");
;;;188    		retval++;
;;;189    	}
;;;190    	if (sizeof(ee_s16) != 2) {
;;;191    		ee_printf("ERROR: ee_s16 is not a 16b datatype!\n");
;;;192    		retval++;
;;;193    	}
;;;194    	if (sizeof(ee_s32) != 4) {
;;;195    		ee_printf("ERROR: ee_s32 is not a 32b datatype!\n");
;;;196    		retval++;
;;;197    	}
;;;198    	if (sizeof(ee_u32) != 4) {
;;;199    		ee_printf("ERROR: ee_u32 is not a 32b datatype!\n");
;;;200    		retval++;
;;;201    	}
;;;202    	if (sizeof(ee_ptr_int) != sizeof(int *)) {
;;;203    		ee_printf("ERROR: ee_ptr_int is not a datatype that holds an int pointer!\n");
;;;204    		retval++;
;;;205    	}
;;;206    	if (retval>0) {
;;;207    		ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
;;;208    	}
;;;209    	return retval;
;;;210    }
000002  4770              BX       lr
                          ENDP


                          AREA ||i.crc16||, CODE, READONLY, ALIGN=2

                  crc16 PROC
;;;175    }
;;;176    ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
000000  fa1ffc80          UXTH     r12,r0
;;;177    	return crcu16((ee_u16)newval, crc);
000004  f00c00ff          AND      r0,r12,#0xff
000008  f05f0208          MOVS.W   r2,#8
                  |L2.12|
00000c  ea800301          EOR      r3,r0,r1
000010  f0130f01          TST      r3,#1
000014  ea4f0050          LSR      r0,r0,#1
000018  bf1a              ITTE     NE                    ;176
00001a  f24a0301          MOVNE    r3,#0xa001            ;176
00001e  ea830151          EORNE    r1,r3,r1,LSR #1       ;176
000022  0849              LSREQ    r1,r1,#1              ;176
000024  1e52              SUBS     r2,r2,#1              ;176
000026  d1f1              BNE      |L2.12|
000028  4608              MOV      r0,r1                 ;176
00002a  ea4f221c          LSR      r2,r12,#8             ;176
00002e  2108              MOVS     r1,#8                 ;176
000030  f24a0c01          MOV      r12,#0xa001           ;176
                  |L2.52|
000034  ea820300          EOR      r3,r2,r0              ;176
000038  f0130f01          TST      r3,#1                 ;176
00003c  ea4f0252          LSR      r2,r2,#1              ;176
000040  bf14              ITE      NE                    ;176
000042  ea8c0050          EORNE    r0,r12,r0,LSR #1      ;176
000046  0840              LSREQ    r0,r0,#1              ;176
000048  1e49              SUBS     r1,r1,#1              ;176
00004a  d1f3              BNE      |L2.52|
;;;178    }
00004c  4770              BX       lr
;;;179    
                          ENDP


                          AREA ||i.crcu16||, CODE, READONLY, ALIGN=2

                  crcu16 PROC
;;;165    } 
;;;166    ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
000000  4603              MOV      r3,r0
;;;167    	crc=crcu8( (ee_u8) (newval)				,crc);
000002  b2c0              UXTB     r0,r0
000004  f05f0208          MOVS.W   r2,#8
                  |L3.8|
000008  ea800c01          EOR      r12,r0,r1
00000c  f01c0f01          TST      r12,#1
000010  ea4f0050          LSR      r0,r0,#1
000014  bf1a              ITTE     NE                    ;166
000016  f24a0c01          MOVNE    r12,#0xa001           ;166
00001a  ea8c0151          EORNE    r1,r12,r1,LSR #1      ;166
00001e  0849              LSREQ    r1,r1,#1              ;166
000020  1e52              SUBS     r2,r2,#1              ;166
000022  d1f1              BNE      |L3.8|
000024  4608              MOV      r0,r1                 ;166
;;;168    	crc=crcu8( (ee_u8) ((newval)>>8)	,crc);
000026  0a1a              LSRS     r2,r3,#8
000028  2108              MOVS     r1,#8
00002a  f24a0c01          MOV      r12,#0xa001           ;166
00002e  bf00              NOP                            ;166
                  |L3.48|
000030  ea820300          EOR      r3,r2,r0              ;166
000034  f0130f01          TST      r3,#1                 ;166
000038  ea4f0252          LSR      r2,r2,#1              ;166
00003c  bf14              ITE      NE                    ;166
00003e  ea8c0050          EORNE    r0,r12,r0,LSR #1      ;166
000042  0840              LSREQ    r0,r0,#1              ;166
000044  1e49              SUBS     r1,r1,#1              ;166
000046  d1f3              BNE      |L3.48|
;;;169    	return crc;
;;;170    }
000048  4770              BX       lr
;;;171    ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
                          ENDP


                          AREA ||i.crcu32||, CODE, READONLY, ALIGN=1

                  crcu32 PROC
;;;170    }
;;;171    ee_u16 crcu32(ee_u32 newval, ee_u16 crc) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;172    	crc=crc16((ee_s16) newval		,crc);
000004  b200              SXTH     r0,r0
000006  f7fffffe          BL       crc16
;;;173    	crc=crc16((ee_s16) (newval>>16)	,crc);
00000a  1422              ASRS     r2,r4,#16
00000c  4601              MOV      r1,r0
00000e  e8bd4010          POP      {r4,lr}
000012  4610              MOV      r0,r2
000014  f7ffbffe          B.W      crc16
;;;174    	return crc;
;;;175    }
;;;176    ee_u16 crc16(ee_s16 newval, ee_u16 crc) {
                          ENDP


                          AREA ||i.crcu8||, CODE, READONLY, ALIGN=2

                  crcu8 PROC
;;;141    */
;;;142    ee_u16 crcu8(ee_u8 data, ee_u16 crc )
000000  2208              MOVS     r2,#8
;;;143    {
000002  f24a0c01          MOV      r12,#0xa001
;;;144    	ee_u8 i=0,x16=0,carry=0;
;;;145    
;;;146    	for (i = 0; i < 8; i++)
;;;147        {
;;;148    		x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
000006  bf00              NOP      
                  |L5.8|
000008  ea800301          EOR      r3,r0,r1
00000c  f0130f01          TST      r3,#1
;;;149    		data >>= 1;
000010  ea4f0050          LSR      r0,r0,#1
000014  bf14              ITE      NE                    ;143
000016  ea8c0151          EORNE    r1,r12,r1,LSR #1      ;143
;;;150    
;;;151    		if (x16 == 1)
;;;152    		{
;;;153    		   crc ^= 0x4002;
;;;154    		   carry = 1;
;;;155    		}
;;;156    		else 
;;;157    			carry = 0;
;;;158    		crc >>= 1;
00001a  0849              LSREQ    r1,r1,#1
00001c  1e52              SUBS     r2,r2,#1
00001e  d1f3              BNE      |L5.8|
;;;159    		if (carry)
;;;160    		   crc |= 0x8000;
;;;161    		else
;;;162    		   crc &= 0x7fff;
;;;163        }
;;;164    	return crc;
000020  4608              MOV      r0,r1
;;;165    } 
000022  4770              BX       lr
;;;166    ee_u16 crcu16(ee_u16 newval, ee_u16 crc) {
                          ENDP


                          AREA ||i.get_seed_32||, CODE, READONLY, ALIGN=2

                  get_seed_32 PROC
;;;38     	extern volatile ee_s32 seed5_volatile;
;;;39     	ee_s32 get_seed_32(int i) {
000000  2806              CMP      r0,#6
;;;40     		ee_s32 retval;
;;;41     		switch (i) {
000002  d210              BCS      |L6.38|
000004  e8dff000          TBB      [pc,r0]
000008  0f030608          DCB      0x0f,0x03,0x06,0x08
00000c  0b0d              DCB      0x0b,0x0d
;;;42     			case 1:
;;;43     				retval=seed1_volatile;
00000e  4807              LDR      r0,|L6.44|
000010  6800              LDR      r0,[r0,#0]  ; seed1_volatile
;;;44     				break;
;;;45     			case 2:
;;;46     				retval=seed2_volatile;
;;;47     				break;
;;;48     			case 3:
;;;49     				retval=seed3_volatile;
;;;50     				break;
;;;51     			case 4:
;;;52     				retval=seed4_volatile;
;;;53     				break;
;;;54     			case 5:
;;;55     				retval=seed5_volatile;
;;;56     				break;
;;;57     			default:
;;;58     				retval=0;
;;;59     				break;
;;;60     		}
;;;61     		return retval;
;;;62     	}
000012  4770              BX       lr
000014  4806              LDR      r0,|L6.48|
000016  e000              B        |L6.26|
000018  4806              LDR      r0,|L6.52|
                  |L6.26|
00001a  6800              LDR      r0,[r0,#0]            ;49  ; seed3_volatile
00001c  4770              BX       lr
00001e  4806              LDR      r0,|L6.56|
000020  e7fb              B        |L6.26|
000022  4806              LDR      r0,|L6.60|
000024  e7f9              B        |L6.26|
                  |L6.38|
000026  2000              MOVS     r0,#0                 ;58
000028  4770              BX       lr
;;;63     #elif (SEED_METHOD==SEED_ARG)
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      seed1_volatile
                  |L6.48|
                          DCD      seed2_volatile
                  |L6.52|
                          DCD      seed3_volatile
                  |L6.56|
                          DCD      seed4_volatile
                  |L6.60|
                          DCD      seed5_volatile
