; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\core_portme.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\core_portme.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -I..\Coremark -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DMAIN_HAS_NOARGC --omf_browse=.\obj\core_portme.crf ..\core_portme.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;203    //porting Nuvoton start
;;;204    void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2059              MOVS     r0,#0x59
000004  0784              LSLS     r4,r0,#30
000006  2116              MOVS     r1,#0x16
000008  f05f0288          MOVS.W   r2,#0x88
                  |L1.12|
00000c  f8c40100          STR      r0,[r4,#0x100]
000010  f8c41100          STR      r1,[r4,#0x100]
000014  f8c42100          STR      r2,[r4,#0x100]
000018  f8d43100          LDR      r3,[r4,#0x100]
00001c  2b00              CMP      r3,#0
00001e  d0f5              BEQ      |L1.12|
;;;205    {
;;;206        /*---------------------------------------------------------------------------------------------------------*/
;;;207        /* Init System Clock                                                                                       */
;;;208        /*---------------------------------------------------------------------------------------------------------*/
;;;209        /* Unlock protected registers */
;;;210        SYS_UnlockReg();
;;;211    
;;;212        /* Set XT1_OUT(PF.2) and XT1_IN(PF.3) to input mode */
;;;213        PF->MODE &= ~(GPIO_MODE_MODE2_Msk | GPIO_MODE_MODE3_Msk);
000020  f04f2040          MOV      r0,#0x40004000
000024  f8d01140          LDR      r1,[r0,#0x140]
000028  f02101f0          BIC      r1,r1,#0xf0
00002c  f8c01140          STR      r1,[r0,#0x140]
;;;214    
;;;215        /* Enable External XTAL (4~24 MHz) */
;;;216        CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       CLK_EnableXtalRC
;;;217    
;;;218        /* Waiting for 12MHz clock ready */
;;;219        CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       CLK_WaitClockReady
;;;220    
;;;221        /* Set core clock as PLL_CLOCK from PLL */
;;;222        CLK_SetCoreClock(FREQ_192MHZ);
00003c  480e              LDR      r0,|L1.120|
00003e  f7fffffe          BL       CLK_SetCoreClock
;;;223        /* Set PCLK0/PCLK1 to HCLK/2 */
;;;224        CLK->PCLKDIV = (CLK_PCLKDIV_PCLK0DIV2 | CLK_PCLKDIV_PCLK1DIV2);
000042  2011              MOVS     r0,#0x11
000044  f8c40234          STR      r0,[r4,#0x234]
;;;225    
;;;226        /* Enable UART clock */
;;;227        CLK_EnableModuleClock(UART0_MODULE);
000048  4d0c              LDR      r5,|L1.124|
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       CLK_EnableModuleClock
;;;228    
;;;229        /* Select UART clock source from HXT */
;;;230        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_HXT, CLK_CLKDIV0_UART0(1));
000050  2200              MOVS     r2,#0
000052  4611              MOV      r1,r2
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       CLK_SetModuleClock
;;;231    
;;;232        /* Update System Core Clock */
;;;233        /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock. */
;;;234        SystemCoreClockUpdate();
00005a  f7fffffe          BL       SystemCoreClockUpdate
;;;235    
;;;236    
;;;237    
;;;238        /* Set GPB multi-function pins for UART0 RXD and TXD */
;;;239        SYS->GPB_MFPH &= ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk);
00005e  6be0              LDR      r0,[r4,#0x3c]
000060  f420007f          BIC      r0,r0,#0xff0000
000064  63e0              STR      r0,[r4,#0x3c]
;;;240        SYS->GPB_MFPH |= (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
000066  6be0              LDR      r0,[r4,#0x3c]
000068  f44000cc          ORR      r0,r0,#0x660000
00006c  63e0              STR      r0,[r4,#0x3c]
;;;241        /* Lock protected registers */
;;;242        SYS_LockReg();
00006e  2000              MOVS     r0,#0
000070  f8c40100          STR      r0,[r4,#0x100]
;;;243    }
000074  bd70              POP      {r4-r6,pc}
;;;244    
                          ENDP

000076  0000              DCW      0x0000
                  |L1.120|
                          DCD      0x0b71b000
                  |L1.124|
                          DCD      0x57803d10

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;245    
;;;246    void SysTick_Handler(void) 
000000  4802              LDR      r0,|L2.12|
;;;247    { 
;;;248    	extern __IO uint32_t Tick; 
;;;249    	Tick++; 
000002  6801              LDR      r1,[r0,#0]  ; Tick
000004  1c49              ADDS     r1,r1,#1
000006  6001              STR      r1,[r0,#0]  ; Tick
;;;250    } 
000008  4770              BX       lr
;;;251    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      ||area_number.17||

                          AREA ||i.get_time||, CODE, READONLY, ALIGN=2

                  get_time PROC
;;;133    */
;;;134    CORE_TICKS get_time(void) {
000000  4801              LDR      r0,|L3.8|
;;;135    
;;;136    #if 1
;;;137    //porting Nuvoton start
;;;138    
;;;139    	CORE_TICKS  elapsed = (CORE_TICKS)Tick; 
000002  6800              LDR      r0,[r0,#0]  ; Tick
;;;140    	return elapsed;
;;;141    
;;;142    #else
;;;143    	CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
;;;144    	return elapsed;
;;;145    #endif
;;;146    
;;;147    }
000004  4770              BX       lr
;;;148    /* Function : time_in_secs
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      ||area_number.17||

                          AREA ||i.portable_fini||, CODE, READONLY, ALIGN=1

                  portable_fini PROC
;;;197    */
;;;198    void portable_fini(core_portable *p)
000000  2100              MOVS     r1,#0
;;;199    {
;;;200    	p->portable_id=0;
000002  7001              STRB     r1,[r0,#0]
;;;201    }
000004  4770              BX       lr
;;;202    
                          ENDP


                          AREA ||i.portable_init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  portable_init PROC
;;;164    */
;;;165    void portable_init(core_portable *p, int *argc, char *argv[])
000000  b570              PUSH     {r4-r6,lr}
;;;166    {
000002  4605              MOV      r5,r0
000004  2059              MOVS     r0,#0x59
000006  0784              LSLS     r4,r0,#30
000008  2116              MOVS     r1,#0x16
00000a  2288              MOVS     r2,#0x88
                  |L5.12|
00000c  f8c40100          STR      r0,[r4,#0x100]
000010  f8c41100          STR      r1,[r4,#0x100]
000014  f8c42100          STR      r2,[r4,#0x100]
000018  f8d43100          LDR      r3,[r4,#0x100]
00001c  2b00              CMP      r3,#0
00001e  d0f5              BEQ      |L5.12|
000020  f04f2040          MOV      r0,#0x40004000
000024  f8d01140          LDR      r1,[r0,#0x140]
000028  f02101f0          BIC      r1,r1,#0xf0
00002c  f8c01140          STR      r1,[r0,#0x140]
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       CLK_EnableXtalRC
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       CLK_WaitClockReady
00003c  4820              LDR      r0,|L5.192|
00003e  f7fffffe          BL       CLK_SetCoreClock
000042  2011              MOVS     r0,#0x11
000044  f8c40234          STR      r0,[r4,#0x234]
000048  4e1e              LDR      r6,|L5.196|
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       CLK_EnableModuleClock
000050  2200              MOVS     r2,#0
000052  4611              MOV      r1,r2
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       CLK_SetModuleClock
00005a  f7fffffe          BL       SystemCoreClockUpdate
00005e  6be0              LDR      r0,[r4,#0x3c]
000060  f420007f          BIC      r0,r0,#0xff0000
000064  63e0              STR      r0,[r4,#0x3c]
000066  6be0              LDR      r0,[r4,#0x3c]
000068  f44000cc          ORR      r0,r0,#0x660000
00006c  63e0              STR      r0,[r4,#0x3c]
00006e  2000              MOVS     r0,#0
000070  f8c40100          STR      r0,[r4,#0x100]
;;;167    
;;;168    
;;;169    //porting Nuvoton start
;;;170        SYS_Init();
;;;171        /* Init UART to 115200-8n1 for print message */
;;;172        UART_Open(UART0, 115200);
000074  f44f31e1          MOV      r1,#0x1c200
000078  4813              LDR      r0,|L5.200|
00007a  f7fffffe          BL       UART_Open
;;;173        /* Connect UART to PC, and open a terminal tool to receive following message */
;;;174    
;;;175    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
00007e  f7fffffe          BL       CLK_GetCPUFreq
000082  4601              MOV      r1,r0
000084  a011              ADR      r0,|L5.204|
000086  f7fffffe          BL       __2printf
;;;176    	printf("CLK_GetHCLKFreq : %8d\r\n",CLK_GetHCLKFreq());	
00008a  f7fffffe          BL       CLK_GetHCLKFreq
00008e  4601              MOV      r1,r0
000090  a015              ADR      r0,|L5.232|
000092  f7fffffe          BL       __2printf
;;;177    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000096  f7fffffe          BL       CLK_GetPCLK0Freq
00009a  4601              MOV      r1,r0
00009c  a018              ADR      r0,|L5.256|
00009e  f7fffffe          BL       __2printf
;;;178    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());
0000a2  f7fffffe          BL       CLK_GetPCLK1Freq
0000a6  4601              MOV      r1,r0
0000a8  a01c              ADR      r0,|L5.284|
0000aa  f7fffffe          BL       __2printf
;;;179    
;;;180        printf("Coremark start (%d ms) !\n" , ITERATIONS);
0000ae  f64261e0          MOV      r1,#0x2ee0
0000b2  a021              ADR      r0,|L5.312|
0000b4  f7fffffe          BL       __2printf
;;;181    
;;;182    
;;;183    	
;;;184    //porting Nuvoton end
;;;185    
;;;186    
;;;187    	if (sizeof(ee_ptr_int) != sizeof(ee_u8 *)) {
;;;188    		ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
;;;189    	}
;;;190    	if (sizeof(ee_u32) != 4) {
;;;191    		ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
;;;192    	}
;;;193    	p->portable_id=1;
0000b8  2001              MOVS     r0,#1
0000ba  7028              STRB     r0,[r5,#0]
;;;194    }
0000bc  bd70              POP      {r4-r6,pc}
;;;195    /* Function : portable_fini
                          ENDP

0000be  0000              DCW      0x0000
                  |L5.192|
                          DCD      0x0b71b000
                  |L5.196|
                          DCD      0x57803d10
                  |L5.200|
                          DCD      0x40070000
                  |L5.204|
0000cc  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
0000d0  4b5f4765
0000d4  74435055
0000d8  46726571
0000dc  203a2025
0000e0  38640d0a
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L5.232|
0000e8  434c4b5f          DCB      "CLK_GetHCLKFreq : %8d\r\n",0
0000ec  47657448
0000f0  434c4b46
0000f4  72657120
0000f8  3a202538
0000fc  640d0a00
                  |L5.256|
000100  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
000104  47657450
000108  434c4b30
00010c  46726571
000110  203a2025
000114  38640d0a
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L5.284|
00011c  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
000120  47657450
000124  434c4b31
000128  46726571
00012c  203a2025
000130  38640d0a
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
                  |L5.312|
000138  436f7265          DCB      "Coremark start (%d ms) !\n",0
00013c  6d61726b
000140  20737461
000144  72742028
000148  2564206d
00014c  73292021
000150  0a00    
000152  00                DCB      0
000153  00                DCB      0

                          AREA ||i.start_time||, CODE, READONLY, ALIGN=2

                  start_time PROC
;;;90     */
;;;91     void start_time(void) {
000000  480c              LDR      r0,|L6.52|
;;;92     
;;;93     #if 1
;;;94     //porting Nuvoton start
;;;95     	Tick = 0; 
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]  ; Tick
;;;96     	SysTick_Config(SystemCoreClock/1000);
000006  480c              LDR      r0,|L6.56|
000008  f44f727a          MOV      r2,#0x3e8
00000c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000e  fbb0f0f2          UDIV     r0,r0,r2
000012  1e42              SUBS     r2,r0,#1
000014  f1b27f80          CMP      r2,#0x1000000
;;;97     
;;;98     //porting Nuvoton end
;;;99     #else
;;;100    	GETMYTIME(&start_time_val );      
;;;101    #endif
;;;102    }
000018  bf28              IT       CS
00001a  4770              BXCS     lr
00001c  f04f20e0          MOV      r0,#0xe000e000
000020  6142              STR      r2,[r0,#0x14]
000022  4b06              LDR      r3,|L6.60|
000024  22f0              MOVS     r2,#0xf0
000026  f8832d14          STRB     r2,[r3,#0xd14]
00002a  6181              STR      r1,[r0,#0x18]
00002c  2107              MOVS     r1,#7
00002e  6101              STR      r1,[r0,#0x10]
000030  4770              BX       lr
;;;103    /* Function : stop_time
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
                          DCD      ||area_number.17||
                  |L6.56|
                          DCD      SystemCoreClock
                  |L6.60|
                          DCD      0xe000e00f

                          AREA ||i.stop_time||, CODE, READONLY, ALIGN=1

                  stop_time PROC
;;;108    */
;;;109    void stop_time(void) {
000000  f04f20e0          MOV      r0,#0xe000e000
;;;110    
;;;111    #if 1
;;;112    //porting Nuvoton start
;;;113    
;;;114    	/* Stop the Timer and get the encoding time  */
;;;115    	SysTick->CTRL &= SysTick_Counter_Disable;
000004  6901              LDR      r1,[r0,#0x10]
000006  f0210101          BIC      r1,r1,#1
00000a  6101              STR      r1,[r0,#0x10]
;;;116    
;;;117    	/* Clear the SysTick Counter */ 
;;;118    	SysTick->VAL = SysTick_Counter_Clear; 
00000c  2100              MOVS     r1,#0
00000e  6181              STR      r1,[r0,#0x18]
;;;119    
;;;120    //porting Nuvoton end
;;;121    #else
;;;122    	GETMYTIME(&stop_time_val );      
;;;123    #endif
;;;124    }
000010  4770              BX       lr
;;;125    /* Function : get_time
                          ENDP


                          AREA ||i.time_in_secs||, CODE, READONLY, ALIGN=3

                  time_in_secs PROC
;;;153    */
;;;154    secs_ret time_in_secs(CORE_TICKS ticks) {
000000  b510              PUSH     {r4,lr}
;;;155    	secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
000002  f7fffffe          BL       __aeabi_ui2d
000006  ed9f1b04          VLDR     d1,|L8.24|
00000a  ec532b11          VMOV     r2,r3,d1
00000e  f7fffffe          BL       __aeabi_ddiv
000012  ec410b10          VMOV     d0,r0,r1
;;;156    	return retval;
;;;157    }
000016  bd10              POP      {r4,pc}
;;;158    
                          ENDP

                  |L8.24|
000018  00000000          DCFD     0x408f400000000000 ; 1000
00001c  408f4000

                          AREA ||.data||, DATA, ALIGN=2

                  seed1_volatile
                          DCD      0x00000000

                          AREA ||area_number.12||, DATA, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.data||
                  seed2_volatile
                          DCD      0x00000000

                          AREA ||area_number.13||, DATA, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.data||
                  seed3_volatile
                          DCD      0x00000066

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  seed4_volatile
                          DCD      0x00002ee0

                          AREA ||area_number.15||, DATA, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.data||
                  seed5_volatile
                          DCD      0x00000000

                          AREA ||area_number.16||, DATA, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.data||
                  default_num_contexts
                          DCD      0x00000001

                          AREA ||area_number.17||, DATA, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.data||
                  Tick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\core_portme.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_core_portme_c_b5215cc8____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_core_portme_c_b5215cc8____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_core_portme_c_b5215cc8____REVSH|
#line 402
|__asm___13_core_portme_c_b5215cc8____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_core_portme_c_b5215cc8____RRX|
#line 587
|__asm___13_core_portme_c_b5215cc8____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
