; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\core_matrix.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\core_matrix.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -I..\Coremark -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DMAIN_HAS_NOARGC --omf_browse=.\obj\core_matrix.crf ..\Coremark\core_matrix.c]
                          THUMB

                          AREA ||i.core_bench_matrix||, CODE, READONLY, ALIGN=1

                  core_bench_matrix PROC
;;;80     */
;;;81     ee_u16 core_bench_matrix(mat_params *p, ee_s16 seed, ee_u16 crc) {
000000  b538              PUSH     {r3-r5,lr}
000002  4615              MOV      r5,r2
;;;82     	ee_u32 N=p->N;
;;;83     	MATRES *C=p->C;
000004  e9d02301          LDRD     r2,r3,[r0,#4]
;;;84     	MATDAT *A=p->A;
;;;85     	MATDAT *B=p->B;
;;;86     	MATDAT val=(MATDAT)seed;
;;;87     
;;;88     	crc=crc16(matrix_test(N,C,A,B,val),crc);
000008  f8d0c000          LDR      r12,[r0,#0]
00000c  68c4              LDR      r4,[r0,#0xc]
00000e  9100              STR      r1,[sp,#0]
000010  4621              MOV      r1,r4
000012  4660              MOV      r0,r12
000014  f7fffffe          BL       matrix_test
000018  4629              MOV      r1,r5
00001a  e8bd4038          POP      {r3-r5,lr}
00001e  f7ffbffe          B.W      crc16
;;;89     
;;;90     	return crc;
;;;91     }
;;;92     
                          ENDP


                          AREA ||i.core_init_matrix||, CODE, READONLY, ALIGN=2

                  core_init_matrix PROC
;;;164    */
;;;165    ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;166    	ee_u32 N=0;
;;;167    	MATDAT *A;
;;;168    	MATDAT *B;
;;;169    	ee_s32 order=1;
;;;170    	MATDAT val;
;;;171    	ee_u32 i=0,j=0;
000004  2400              MOVS     r4,#0
000006  f04f0c01          MOV      r12,#1                ;169
;;;172    	if (seed==0)
00000a  2a00              CMP      r2,#0
;;;173    		seed=1;
00000c  bf08              IT       EQ
00000e  2201              MOVEQ    r2,#1
;;;174    	while (j<blksize) {
000010  2800              CMP      r0,#0
000012  d905              BLS      |L2.32|
                  |L2.20|
000014  1c64              ADDS     r4,r4,#1              ;165
;;;175    		i++;
;;;176    		j=i*i*2*4;		
000016  fb04f504          MUL      r5,r4,r4
00001a  00ed              LSLS     r5,r5,#3
00001c  42a8              CMP      r0,r5
00001e  d8f9              BHI      |L2.20|
                  |L2.32|
;;;177    	}
;;;178    	N=i-1;
000020  1e49              SUBS     r1,r1,#1
000022  1e60              SUBS     r0,r4,#1
;;;179    	A=(MATDAT *)align_mem(memblk);
000024  f0210103          BIC      r1,r1,#3
000028  f1010b04          ADD      r11,r1,#4
;;;180    	B=A+N*N;
00002c  fb00fe00          MUL      lr,r0,r0
000030  eb0b0a4e          ADD      r10,r11,lr,LSL #1
;;;181    
;;;182    	for (i=0; i<N; i++) {
000034  2800              CMP      r0,#0
000036  bf18              IT       NE
000038  2100              MOVNE    r1,#0
00003a  d928              BLS      |L2.142|
00003c  e000              B        |L2.64|
                  |L2.62|
;;;183    		for (j=0; j<N; j++) {
00003e  b318              CBZ      r0,|L2.136|
                  |L2.64|
000040  fb01f400          MUL      r4,r1,r0
000044  eb0a0644          ADD      r6,r10,r4,LSL #1
000048  eb0b0544          ADD      r5,r11,r4,LSL #1
00004c  f04f0400          MOV      r4,#0
000050  ea4f0700          MOV.W    r7,r0
                  |L2.84|
;;;184    			seed = ( ( order * seed ) % 65536 );
000054  eb0c0904          ADD      r9,r12,r4
000058  fb09f202          MUL      r2,r9,r2
00005c  ea4f78e2          ASR      r8,r2,#31
000060  eb024818          ADD      r8,r2,r8,LSR #16
000064  f36f080f          BFC      r8,#0,#16
000068  eba20208          SUB      r2,r2,r8
;;;185    			val = (seed + order);
00006c  eb090802          ADD      r8,r9,r2
;;;186    			val=matrix_clip(val,0);
;;;187    			B[i*N+j] = val;
000070  f8268b02          STRH     r8,[r6],#2
;;;188    			val =  (val + order);
000074  44c8              ADD      r8,r8,r9
;;;189    			val=matrix_clip(val,1);
000076  f00808ff          AND      r8,r8,#0xff
;;;190    			A[i*N+j] = val;
00007a  f8258b02          STRH     r8,[r5],#2
00007e  f1040401          ADD      r4,r4,#1
000082  1e7f              SUBS     r7,r7,#1
;;;191    			order++;
;;;192    		}
000084  d1e6              BNE      |L2.84|
000086  4484              ADD      r12,r12,r0
                  |L2.136|
000088  1c49              ADDS     r1,r1,#1
00008a  4281              CMP      r1,r0
00008c  d3d7              BCC      |L2.62|
                  |L2.142|
;;;193    	}
;;;194    
;;;195    	p->A=A;
;;;196    	p->B=B;
;;;197    	p->C=(MATRES *)align_mem(B+N*N);
00008e  eb0a014e          ADD      r1,r10,lr,LSL #1
000092  e9c3ba01          STRD     r11,r10,[r3,#4]       ;192
000096  1e49              SUBS     r1,r1,#1
000098  f0210103          BIC      r1,r1,#3
00009c  1d09              ADDS     r1,r1,#4
;;;198    	p->N=N;
00009e  60d9              STR      r1,[r3,#0xc]
0000a0  6018              STR      r0,[r3,#0]
;;;199    #if CORE_DEBUG
;;;200    	printmat(A,N,"A");
;;;201    	printmat(B,N,"B");
;;;202    #endif
;;;203    	return N;
;;;204    }
0000a2  e8bd8ff0          POP      {r4-r11,pc}
;;;205    
                          ENDP


                          AREA ||i.matrix_add_const||, CODE, READONLY, ALIGN=1

                  matrix_add_const PROC
;;;251    */
;;;252    void matrix_add_const(ee_u32 N, MATDAT *A, MATDAT val) {
000000  b410              PUSH     {r4}
;;;253    	ee_u32 i,j;
;;;254    	for (i=0; i<N; i++) {
000002  2800              CMP      r0,#0
;;;255    		for (j=0; j<N; j++) {
;;;256    			A[i*N+j] += val;
;;;257    		}
;;;258    	}
000004  bf19              ITTEE    NE
000006  fb00f300          MULNE    r3,r0,r0
00000a  2b00              CMPNE    r3,#0
;;;259    }
00000c  bc10              POPEQ    {r4}
00000e  4770              BXEQ     lr
000010  f0100001          ANDS     r0,r0,#1              ;258
000014  d004              BEQ      |L3.32|
000016  f8b1c000          LDRH     r12,[r1,#0]           ;256
00001a  4494              ADD      r12,r12,r2            ;256
00001c  f8a1c000          STRH     r12,[r1,#0]           ;256
                  |L3.32|
000020  4283              CMP      r3,r0                 ;254
000022  bf9c              ITT      LS
000024  bc10              POPLS    {r4}
000026  4770              BXLS     lr
                  |L3.40|
000028  f831c010          LDRH     r12,[r1,r0,LSL #1]    ;256
00002c  4494              ADD      r12,r12,r2            ;256
00002e  f821c010          STRH     r12,[r1,r0,LSL #1]    ;256
000032  eb010c40          ADD      r12,r1,r0,LSL #1      ;256
000036  1c80              ADDS     r0,r0,#2              ;256
000038  f8bc4002          LDRH     r4,[r12,#2]           ;256
00003c  4283              CMP      r3,r0                 ;256
00003e  4414              ADD      r4,r4,r2              ;256
000040  f8ac4002          STRH     r4,[r12,#2]           ;256
000044  d8f0              BHI      |L3.40|
000046  bc10              POP      {r4}
000048  4770              BX       lr
;;;260    
                          ENDP


                          AREA ||i.matrix_mul_const||, CODE, READONLY, ALIGN=1

                  matrix_mul_const PROC
;;;239    */
;;;240    void matrix_mul_const(ee_u32 N, MATRES *C, MATDAT *A, MATDAT val) {
000000  e92d01f0          PUSH     {r4-r8}
;;;241    	ee_u32 i,j;
;;;242    	for (i=0; i<N; i++) {
000004  2800              CMP      r0,#0
000006  bf18              IT       NE
000008  2600              MOVNE    r6,#0
;;;243    		for (j=0; j<N; j++) {
00000a  bf8e              ITEE     HI
00000c  0847              LSRHI    r7,r0,#1
;;;244    			C[i*N+j]=(MATRES)A[i*N+j] * (MATRES)val;
;;;245    		}
;;;246    	}
;;;247    }
00000e  e8bd01f0          POPLS    {r4-r8}
000012  4770              BXLS     lr
                  |L4.20|
000014  fb06fc00          MUL      r12,r6,r0             ;243
000018  eb02044c          ADD      r4,r2,r12,LSL #1      ;243
00001c  f1a40502          SUB      r5,r4,#2              ;243
000020  eb010c8c          ADD      r12,r1,r12,LSL #2     ;243
000024  f1ac0404          SUB      r4,r12,#4             ;243
000028  f0100f01          TST      r0,#1
00002c  d005              BEQ      |L4.58|
00002e  f835cf02          LDRH     r12,[r5,#2]!          ;244
000032  fb1cfc03          SMULBB   r12,r12,r3            ;244
000036  f844cf04          STR      r12,[r4,#4]!          ;244
                  |L4.58|
00003a  f1b70c00          SUBS     r12,r7,#0             ;243
00003e  d00e              BEQ      |L4.94|
                  |L4.64|
000040  f8b58002          LDRH     r8,[r5,#2]            ;244
000044  fb18f803          SMULBB   r8,r8,r3              ;244
000048  f8c48004          STR      r8,[r4,#4]            ;244
00004c  f8358f04          LDRH     r8,[r5,#4]!           ;244
000050  fb18f803          SMULBB   r8,r8,r3              ;244
000054  f8448f08          STR      r8,[r4,#8]!           ;244
000058  f1bc0c01          SUBS     r12,r12,#1            ;244
00005c  d1f0              BNE      |L4.64|
                  |L4.94|
00005e  1c76              ADDS     r6,r6,#1              ;244
000060  4286              CMP      r6,r0                 ;244
000062  bf24              ITT      CS
000064  e8bd01f0          POPCS    {r4-r8}
000068  4770              BXCS     lr
00006a  2800              CMP      r0,#0                 ;243
00006c  d1d2              BNE      |L4.20|
00006e  e7f6              B        |L4.94|
;;;248    
                          ENDP


                          AREA ||i.matrix_mul_matrix||, CODE, READONLY, ALIGN=2

                  matrix_mul_matrix PROC
;;;278    */
;;;279    void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;280    	ee_u32 i,j,k;
;;;281    	for (i=0; i<N; i++) {
000004  2800              CMP      r0,#0
000006  bf18              IT       NE
000008  2700              MOVNE    r7,#0
;;;282    		for (j=0; j<N; j++) {
;;;283    			C[i*N+j]=0;
;;;284    			for(k=0;k<N;k++)
00000a  bf8e              ITEE     HI
00000c  ea4f0850          LSRHI    r8,r0,#1
;;;285    			{
;;;286    				C[i*N+j]+=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
;;;287    			}
;;;288    		}
;;;289    	}
;;;290    }
000010  b004              ADDLS    sp,sp,#0x10
000012  e8bd8ff0          POPLS    {r4-r11,pc}
000016  bf00              NOP                            ;282
                  |L5.24|
000018  f04f0600          MOV      r6,#0                 ;282
00001c  2800              CMP      r0,#0                 ;282
00001e  d937              BLS      |L5.144|
000020  9b02              LDR      r3,[sp,#8]            ;284
000022  fb07f200          MUL      r2,r7,r0              ;284
000026  eb030a42          ADD      r10,r3,r2,LSL #1      ;284
                  |L5.42|
00002a  fb076900          MLA      r9,r7,r0,r6           ;283
00002e  2200              MOVS     r2,#0                 ;283
000030  f8412029          STR      r2,[r1,r9,LSL #2]     ;283
000034  b348              CBZ      r0,|L5.138|
000036  9b03              LDR      r3,[sp,#0xc]          ;284
000038  eba60c00          SUB      r12,r6,r0             ;284
00003c  f1aa0402          SUB      r4,r10,#2             ;284
000040  eb030c4c          ADD      r12,r3,r12,LSL #1     ;284
000044  f0100f01          TST      r0,#1
000048  d007              BEQ      |L5.90|
00004a  eb0c0c40          ADD      r12,r12,r0,LSL #1     ;286
00004e  f8343f02          LDRH     r3,[r4,#2]!           ;286
000052  f8bc5000          LDRH     r5,[r12,#0]           ;286
000056  fb132205          SMLABB   r2,r3,r5,r2           ;286
                  |L5.90|
00005a  2500              MOVS     r5,#0
00005c  ea5f0308          MOVS     r3,r8
000060  d010              BEQ      |L5.132|
000062  bf00              NOP                            ;286
                  |L5.100|
000064  f8b4b002          LDRH     r11,[r4,#2]           ;286
000068  f83ce010          LDRH     lr,[r12,r0,LSL #1]    ;286
00006c  fb1b220e          SMLABB   r2,r11,lr,r2          ;286
000070  eb0c0c80          ADD      r12,r12,r0,LSL #2     ;286
000074  f834bf04          LDRH     r11,[r4,#4]!          ;286
000078  f8bce000          LDRH     lr,[r12,#0]           ;286
00007c  fb1b550e          SMLABB   r5,r11,lr,r5          ;286
000080  1e5b              SUBS     r3,r3,#1              ;286
000082  d1ef              BNE      |L5.100|
                  |L5.132|
000084  442a              ADD      r2,r2,r5
000086  f8412029          STR      r2,[r1,r9,LSL #2]     ;287
                  |L5.138|
00008a  1c76              ADDS     r6,r6,#1              ;287
00008c  4286              CMP      r6,r0                 ;287
00008e  d3cc              BCC      |L5.42|
                  |L5.144|
000090  1c7f              ADDS     r7,r7,#1              ;287
000092  4287              CMP      r7,r0                 ;287
000094  bf24              ITT      CS
000096  b004              ADDCS    sp,sp,#0x10
000098  e8bd8ff0          POPCS    {r4-r11,pc}
00009c  2800              CMP      r0,#0                 ;282
00009e  d0f7              BEQ      |L5.144|
0000a0  e7ba              B        |L5.24|
;;;291    
                          ENDP


                          AREA ||i.matrix_mul_matrix_bitextract||, CODE, READONLY, ALIGN=1

                  matrix_mul_matrix_bitextract PROC
;;;295    */
;;;296    void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;297    	ee_u32 i,j,k;
;;;298    	for (i=0; i<N; i++) {
000004  2800              CMP      r0,#0
000006  bf18              IT       NE
000008  f04f0800          MOVNE    r8,#0
00000c  bf8e              ITEE     HI
00000e  f04f0e00          MOVHI    lr,#0
;;;299    		for (j=0; j<N; j++) {
;;;300    			C[i*N+j]=0;
;;;301    			for(k=0;k<N;k++)
;;;302    			{
;;;303    				MATRES tmp=(MATRES)A[i*N+k] * (MATRES)B[k*N+j];
;;;304    				C[i*N+j]+=bit_extract(tmp,2,4)*bit_extract(tmp,5,7);
;;;305    			}
;;;306    		}
;;;307    	}
;;;308    }
000012  b004              ADDLS    sp,sp,#0x10
000014  e8bd8ff0          POPLS    {r4-r11,pc}
                  |L6.24|
000018  f04f0500          MOV      r5,#0                 ;299
00001c  2800              CMP      r0,#0                 ;299
00001e  d924              BLS      |L6.106|
000020  f8ddc008          LDR      r12,[sp,#8]           ;301
000024  fb08f200          MUL      r2,r8,r0              ;301
000028  eb0c0a42          ADD      r10,r12,r2,LSL #1     ;301
                  |L6.44|
00002c  fb085b00          MLA      r11,r8,r0,r5          ;300
000030  4672              MOV      r2,lr                 ;300
000032  f841e02b          STR      lr,[r1,r11,LSL #2]    ;300
000036  b1a8              CBZ      r0,|L6.100|
000038  46d4              MOV      r12,r10               ;301
00003a  eb030445          ADD      r4,r3,r5,LSL #1       ;301
00003e  4606              MOV      r6,r0                 ;301
                  |L6.64|
000040  f83c7b02          LDRH     r7,[r12],#2           ;303
000044  f8b49000          LDRH     r9,[r4,#0]            ;303
000048  fb17f709          SMULBB   r7,r7,r9              ;303
00004c  f3c70983          UBFX     r9,r7,#2,#4           ;304
000050  f3c71746          UBFX     r7,r7,#5,#7           ;304
000054  fb192207          SMLABB   r2,r9,r7,r2           ;304
000058  eb040440          ADD      r4,r4,r0,LSL #1       ;304
00005c  1e76              SUBS     r6,r6,#1              ;304
00005e  d1ef              BNE      |L6.64|
000060  f841202b          STR      r2,[r1,r11,LSL #2]    ;305
                  |L6.100|
000064  1c6d              ADDS     r5,r5,#1              ;305
000066  4285              CMP      r5,r0                 ;305
000068  d3e0              BCC      |L6.44|
                  |L6.106|
00006a  f1080801          ADD      r8,r8,#1              ;305
00006e  4580              CMP      r8,r0                 ;305
000070  bf24              ITT      CS
000072  b004              ADDCS    sp,sp,#0x10
000074  e8bd8ff0          POPCS    {r4-r11,pc}
000078  2800              CMP      r0,#0                 ;299
00007a  d0f6              BEQ      |L6.106|
00007c  e7cc              B        |L6.24|
                          ENDP


                          AREA ||i.matrix_mul_vect||, CODE, READONLY, ALIGN=1

                  matrix_mul_vect PROC
;;;264    */
;;;265    void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;266    	ee_u32 i,j;
;;;267    	for (i=0; i<N; i++) {
000004  2800              CMP      r0,#0
000006  bf18              IT       NE
000008  2700              MOVNE    r7,#0
00000a  bf86              ITTE     HI
00000c  f04f0b00          MOVHI    r11,#0
;;;268    		C[i]=0;
;;;269    		for (j=0; j<N; j++) {
000010  ea4f0a50          LSRHI    r10,r0,#1
;;;270    			C[i]+=(MATRES)A[i*N+j] * (MATRES)B[j];
;;;271    		}
;;;272    	}
;;;273    }
000014  e8bd8ff0          POPLS    {r4-r11,pc}
                  |L7.24|
000018  f841b027          STR      r11,[r1,r7,LSL #2]    ;268
00001c  b338              CBZ      r0,|L7.110|
00001e  fb07f400          MUL      r4,r7,r0              ;269
000022  eb020444          ADD      r4,r2,r4,LSL #1       ;269
000026  46dc              MOV      r12,r11               ;269
000028  f1a40502          SUB      r5,r4,#2              ;269
00002c  f1a30602          SUB      r6,r3,#2              ;269
000030  f0100f01          TST      r0,#1
000034  d005              BEQ      |L7.66|
000036  f8354f02          LDRH     r4,[r5,#2]!           ;270
00003a  f8368f02          LDRH     r8,[r6,#2]!           ;270
00003e  fb14cc08          SMLABB   r12,r4,r8,r12         ;270
                  |L7.66|
000042  f04f0800          MOV      r8,#0
000046  ea5f040a          MOVS     r4,r10
00004a  d00d              BEQ      |L7.104|
                  |L7.76|
00004c  f8b59002          LDRH     r9,[r5,#2]            ;270
000050  f8b6e002          LDRH     lr,[r6,#2]            ;270
000054  fb19cc0e          SMLABB   r12,r9,lr,r12         ;270
000058  f8359f04          LDRH     r9,[r5,#4]!           ;270
00005c  f836ef04          LDRH     lr,[r6,#4]!           ;270
000060  fb19880e          SMLABB   r8,r9,lr,r8           ;270
000064  1e64              SUBS     r4,r4,#1              ;270
000066  d1f1              BNE      |L7.76|
                  |L7.104|
000068  44c4              ADD      r12,r12,r8
00006a  f841c027          STR      r12,[r1,r7,LSL #2]    ;271
                  |L7.110|
00006e  1c7f              ADDS     r7,r7,#1              ;271
000070  4287              CMP      r7,r0                 ;271
000072  d3d1              BCC      |L7.24|
000074  e8bd8ff0          POP      {r4-r11,pc}
;;;274    
                          ENDP


                          AREA ||i.matrix_sum||, CODE, READONLY, ALIGN=1

                  matrix_sum PROC
;;;215    */
;;;216    ee_s16 matrix_sum(ee_u32 N, MATRES *C, MATDAT clipval) {
000000  e92d01f0          PUSH     {r4-r8}
;;;217    	MATRES tmp=0,prev=0,cur=0;
000004  2400              MOVS     r4,#0
000006  46a0              MOV      r8,r4
;;;218    	ee_s16 ret=0;
000008  46a4              MOV      r12,r4
;;;219    	ee_u32 i,j;
;;;220    	for (i=0; i<N; i++) {
00000a  2800              CMP      r0,#0
00000c  bf18              IT       NE
00000e  2500              MOVNE    r5,#0
000010  d916              BLS      |L8.64|
000012  e000              B        |L8.22|
                  |L8.20|
;;;221    		for (j=0; j<N; j++) {
000014  b188              CBZ      r0,|L8.58|
                  |L8.22|
000016  fb05f300          MUL      r3,r5,r0
00001a  eb010683          ADD      r6,r1,r3,LSL #2
00001e  4607              MOV      r7,r0
                  |L8.32|
;;;222    			cur=C[i*N+j];
;;;223    			tmp+=cur;
000020  6833              LDR      r3,[r6,#0]
000022  441c              ADD      r4,r4,r3
;;;224    			if (tmp>clipval) {
000024  4294              CMP      r4,r2
000026  dd0f              BLE      |L8.72|
000028  f10c0c0a          ADD      r12,r12,#0xa
;;;225    				ret+=10;
00002c  fa0ffc8c          SXTH     r12,r12
;;;226    				tmp=0;
000030  2400              MOVS     r4,#0
                  |L8.50|
;;;227    			} else {
;;;228    				ret += (cur>prev) ? 1 : 0;
;;;229    			}
;;;230    			prev=cur;
000032  1d36              ADDS     r6,r6,#4
000034  4698              MOV      r8,r3
000036  1e7f              SUBS     r7,r7,#1
000038  d1f2              BNE      |L8.32|
                  |L8.58|
00003a  1c6d              ADDS     r5,r5,#1
00003c  4285              CMP      r5,r0
00003e  d3e9              BCC      |L8.20|
                  |L8.64|
;;;231    		}
;;;232    	}
;;;233    	return ret;
;;;234    }
000040  e8bd01f0          POP      {r4-r8}
000044  4660              MOV      r0,r12                ;233
000046  4770              BX       lr
                  |L8.72|
000048  4543              CMP      r3,r8                 ;228
00004a  bfcc              ITE      GT                    ;228
00004c  f04f0801          MOVGT    r8,#1                 ;228
000050  f04f0800          MOVLE    r8,#0                 ;228
000054  44c4              ADD      r12,r12,r8            ;228
000056  fa0ffc8c          SXTH     r12,r12               ;228
00005a  e7ea              B        |L8.50|
;;;235    
                          ENDP


                          AREA ||i.matrix_test||, CODE, READONLY, ALIGN=2

                  matrix_test PROC
;;;116    */
;;;117    ee_s16 matrix_test(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B, MATDAT val) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b091              SUB      sp,sp,#0x44
;;;118    	ee_u16 crc=0;
000006  2600              MOVS     r6,#0
;;;119    	MATDAT clipval=matrix_big(val);
000008  981e              LDR      r0,[sp,#0x78]
00000a  9a13              LDR      r2,[sp,#0x4c]
00000c  f4404070          ORR      r0,r0,#0xf000
000010  b200              SXTH     r0,r0
;;;120    
;;;121    	matrix_add_const(N,A,val); /* make sure data changes  */
000012  900c              STR      r0,[sp,#0x30]
000014  9811              LDR      r0,[sp,#0x44]
000016  991e              LDR      r1,[sp,#0x78]
000018  fb00f300          MUL      r3,r0,r0
00001c  930b              STR      r3,[sp,#0x2c]
00001e  2800              CMP      r0,#0
000020  bf18              IT       NE
000022  ea5f0c03          MOVSNE   r12,r3
000026  d014              BEQ      |L9.82|
000028  f0100001          ANDS     r0,r0,#1              ;117
00002c  d002              BEQ      |L9.52|
00002e  8813              LDRH     r3,[r2,#0]            ;117
000030  440b              ADD      r3,r3,r1              ;117
000032  8013              STRH     r3,[r2,#0]            ;117
                  |L9.52|
000034  4584              CMP      r12,r0                ;117
000036  d90c              BLS      |L9.82|
                  |L9.56|
000038  f8323010          LDRH     r3,[r2,r0,LSL #1]     ;117
00003c  440b              ADD      r3,r3,r1              ;117
00003e  f8223010          STRH     r3,[r2,r0,LSL #1]     ;117
000042  eb020340          ADD      r3,r2,r0,LSL #1       ;117
000046  1c80              ADDS     r0,r0,#2              ;117
000048  885c              LDRH     r4,[r3,#2]            ;117
00004a  4584              CMP      r12,r0                ;117
00004c  440c              ADD      r4,r4,r1              ;117
00004e  805c              STRH     r4,[r3,#2]            ;117
000050  d8f2              BHI      |L9.56|
                  |L9.82|
;;;122    #if CORE_DEBUG
;;;123    	printmat(A,N,"matrix_add_const");
;;;124    #endif
;;;125    	matrix_mul_const(N,C,A,val);
000052  e9dd0911          LDRD     r0,r9,[sp,#0x44]
000056  f8dd804c          LDR      r8,[sp,#0x4c]
00005a  9d1e              LDR      r5,[sp,#0x78]
00005c  2800              CMP      r0,#0
00005e  bf18              IT       NE
000060  2400              MOVNE    r4,#0
000062  bf88              IT       HI
000064  0847              LSRHI    r7,r0,#1
000066  d926              BLS      |L9.182|
                  |L9.104|
000068  fb04f100          MUL      r1,r4,r0
00006c  eb080241          ADD      r2,r8,r1,LSL #1
000070  eb090181          ADD      r1,r9,r1,LSL #2
000074  f1a20c02          SUB      r12,r2,#2
000078  f1a10304          SUB      r3,r1,#4
00007c  f0100f01          TST      r0,#1
000080  d005              BEQ      |L9.142|
000082  f93c1f02          LDRSH    r1,[r12,#2]!
000086  fb01f105          MUL      r1,r1,r5
00008a  f8431f04          STR      r1,[r3,#4]!
                  |L9.142|
00008e  003a              MOVS     r2,r7
000090  d00b              BEQ      |L9.170|
000092  bf00              NOP      
                  |L9.148|
000094  f9bc1002          LDRSH    r1,[r12,#2]
000098  4369              MULS     r1,r5,r1
00009a  6059              STR      r1,[r3,#4]
00009c  f93c1f04          LDRSH    r1,[r12,#4]!
0000a0  4369              MULS     r1,r5,r1
0000a2  f8431f08          STR      r1,[r3,#8]!
0000a6  1e52              SUBS     r2,r2,#1
0000a8  d1f4              BNE      |L9.148|
                  |L9.170|
0000aa  1c64              ADDS     r4,r4,#1
0000ac  4284              CMP      r4,r0
0000ae  d202              BCS      |L9.182|
0000b0  2800              CMP      r0,#0
0000b2  d1d9              BNE      |L9.104|
0000b4  e7f9              B        |L9.170|
                  |L9.182|
;;;126    	crc=crc16(matrix_sum(N,C,clipval),crc);
0000b6  e9dd0111          LDRD     r0,r1,[sp,#0x44]
0000ba  9a0c              LDR      r2,[sp,#0x30]
0000bc  f7fffffe          BL       matrix_sum
0000c0  4631              MOV      r1,r6
0000c2  f7fffffe          BL       crc16
0000c6  9001              STR      r0,[sp,#4]
0000c8  e9ddc811          LDRD     r12,r8,[sp,#0x44]
0000cc  e9ddba13          LDRD     r11,r10,[sp,#0x4c]
0000d0  f1bc0f00          CMP      r12,#0
0000d4  bf18              IT       NE
0000d6  2400              MOVNE    r4,#0
0000d8  bf84              ITT      HI
0000da  ea4f095c          LSRHI    r9,r12,#1
0000de  2700              MOVHI    r7,#0
0000e0  d92c              BLS      |L9.316|
                  |L9.226|
0000e2  4638              MOV      r0,r7
0000e4  f8487024          STR      r7,[r8,r4,LSL #2]
0000e8  f1bc0f00          CMP      r12,#0
0000ec  d023              BEQ      |L9.310|
0000ee  fb04f10c          MUL      r1,r4,r12
0000f2  eb0b0141          ADD      r1,r11,r1,LSL #1
0000f6  1e8a              SUBS     r2,r1,#2
0000f8  f1aa0302          SUB      r3,r10,#2
0000fc  f01c0f01          TST      r12,#1
000100  d005              BEQ      |L9.270|
000102  f8321f02          LDRH     r1,[r2,#2]!
000106  f8335f02          LDRH     r5,[r3,#2]!
00010a  fb110005          SMLABB   r0,r1,r5,r0
                  |L9.270|
00010e  2500              MOVS     r5,#0
000110  ea5f0109          MOVS     r1,r9
000114  d00c              BEQ      |L9.304|
                  |L9.278|
000116  8856              LDRH     r6,[r2,#2]
000118  f8b3e002          LDRH     lr,[r3,#2]
00011c  fb16000e          SMLABB   r0,r6,lr,r0
000120  f8326f04          LDRH     r6,[r2,#4]!
000124  f833ef04          LDRH     lr,[r3,#4]!
000128  fb16550e          SMLABB   r5,r6,lr,r5
00012c  1e49              SUBS     r1,r1,#1
00012e  d1f2              BNE      |L9.278|
                  |L9.304|
000130  4428              ADD      r0,r0,r5
000132  f8480024          STR      r0,[r8,r4,LSL #2]
                  |L9.310|
000136  1c64              ADDS     r4,r4,#1
000138  4564              CMP      r4,r12
00013a  d3d2              BCC      |L9.226|
                  |L9.316|
;;;127    #if CORE_DEBUG
;;;128    	printmatC(C,N,"matrix_mul_const");
;;;129    #endif
;;;130    	matrix_mul_vect(N,C,A,B);
;;;131    	crc=crc16(matrix_sum(N,C,clipval),crc);
00013c  e9dd0111          LDRD     r0,r1,[sp,#0x44]
000140  9a0c              LDR      r2,[sp,#0x30]
000142  f7fffffe          BL       matrix_sum
000146  9901              LDR      r1,[sp,#4]
000148  f7fffffe          BL       crc16
;;;132    #if CORE_DEBUG
;;;133    	printmatC(C,N,"matrix_mul_vect");
;;;134    #endif
;;;135    	matrix_mul_matrix(N,C,A,B);
00014c  9001              STR      r0,[sp,#4]
00014e  e9dd0711          LDRD     r0,r7,[sp,#0x44]
000152  9913              LDR      r1,[sp,#0x4c]
000154  9109              STR      r1,[sp,#0x24]
000156  9914              LDR      r1,[sp,#0x50]
000158  910d              STR      r1,[sp,#0x34]
00015a  2800              CMP      r0,#0
00015c  bf18              IT       NE
00015e  2500              MOVNE    r5,#0
000160  bf88              IT       HI
000162  ea4f0850          LSRHI    r8,r0,#1
000166  d93f              BLS      |L9.488|
                  |L9.360|
000168  f04f0600          MOV      r6,#0
00016c  2800              CMP      r0,#0
00016e  d935              BLS      |L9.476|
000170  9a09              LDR      r2,[sp,#0x24]
000172  fb05f100          MUL      r1,r5,r0
000176  eb020a41          ADD      r10,r2,r1,LSL #1
                  |L9.378|
00017a  fb056900          MLA      r9,r5,r0,r6
00017e  2100              MOVS     r1,#0
000180  f8471029          STR      r1,[r7,r9,LSL #2]
000184  b338              CBZ      r0,|L9.470|
000186  1a33              SUBS     r3,r6,r0
000188  9a0d              LDR      r2,[sp,#0x34]
00018a  f1aa0c02          SUB      r12,r10,#2
00018e  eb020343          ADD      r3,r2,r3,LSL #1
000192  f0100f01          TST      r0,#1
000196  d006              BEQ      |L9.422|
000198  eb030340          ADD      r3,r3,r0,LSL #1
00019c  f83c2f02          LDRH     r2,[r12,#2]!
0001a0  881c              LDRH     r4,[r3,#0]
0001a2  fb121104          SMLABB   r1,r2,r4,r1
                  |L9.422|
0001a6  2400              MOVS     r4,#0
0001a8  ea5f0208          MOVS     r2,r8
0001ac  d010              BEQ      |L9.464|
0001ae  bf00              NOP      
                  |L9.432|
0001b0  f8bcb002          LDRH     r11,[r12,#2]
0001b4  f833e010          LDRH     lr,[r3,r0,LSL #1]
0001b8  fb1b110e          SMLABB   r1,r11,lr,r1
0001bc  eb030380          ADD      r3,r3,r0,LSL #2
0001c0  f83cbf04          LDRH     r11,[r12,#4]!
0001c4  f8b3e000          LDRH     lr,[r3,#0]
0001c8  fb1b440e          SMLABB   r4,r11,lr,r4
0001cc  1e52              SUBS     r2,r2,#1
0001ce  d1ef              BNE      |L9.432|
                  |L9.464|
0001d0  4421              ADD      r1,r1,r4
0001d2  f8471029          STR      r1,[r7,r9,LSL #2]
                  |L9.470|
0001d6  1c76              ADDS     r6,r6,#1
0001d8  4286              CMP      r6,r0
0001da  d3ce              BCC      |L9.378|
                  |L9.476|
0001dc  1c6d              ADDS     r5,r5,#1
0001de  4285              CMP      r5,r0
0001e0  d202              BCS      |L9.488|
0001e2  2800              CMP      r0,#0
0001e4  d0fa              BEQ      |L9.476|
0001e6  e7bf              B        |L9.360|
                  |L9.488|
;;;136    	crc=crc16(matrix_sum(N,C,clipval),crc);
0001e8  e9dd0111          LDRD     r0,r1,[sp,#0x44]
0001ec  9a0c              LDR      r2,[sp,#0x30]
0001ee  f7fffffe          BL       matrix_sum
0001f2  9901              LDR      r1,[sp,#4]
0001f4  f7fffffe          BL       crc16
;;;137    #if CORE_DEBUG
;;;138    	printmatC(C,N,"matrix_mul_matrix");
;;;139    #endif
;;;140    	matrix_mul_matrix_bitextract(N,C,A,B);
0001f8  9001              STR      r0,[sp,#4]
0001fa  e9dd0811          LDRD     r0,r8,[sp,#0x44]
0001fe  9913              LDR      r1,[sp,#0x4c]
000200  910a              STR      r1,[sp,#0x28]
000202  f8ddb050          LDR      r11,[sp,#0x50]
000206  2800              CMP      r0,#0
000208  bf18              IT       NE
00020a  2600              MOVNE    r6,#0
00020c  bf88              IT       HI
00020e  f04f0900          MOVHI    r9,#0
000212  d92d              BLS      |L9.624|
                  |L9.532|
000214  f04f0400          MOV      r4,#0
000218  2800              CMP      r0,#0
00021a  d923              BLS      |L9.612|
00021c  9a0a              LDR      r2,[sp,#0x28]
00021e  fb06f100          MUL      r1,r6,r0
000222  eb020a41          ADD      r10,r2,r1,LSL #1
                  |L9.550|
000226  fb064e00          MLA      lr,r6,r0,r4
00022a  4649              MOV      r1,r9
00022c  f848902e          STR      r9,[r8,lr,LSL #2]
000230  b1a8              CBZ      r0,|L9.606|
000232  4652              MOV      r2,r10
000234  eb0b0344          ADD      r3,r11,r4,LSL #1
000238  ea4f0500          MOV.W    r5,r0
                  |L9.572|
00023c  f832cb02          LDRH     r12,[r2],#2
000240  881f              LDRH     r7,[r3,#0]
000242  fb1cfc07          SMULBB   r12,r12,r7
000246  f3cc0783          UBFX     r7,r12,#2,#4
00024a  f3cc1c46          UBFX     r12,r12,#5,#7
00024e  fb17110c          SMLABB   r1,r7,r12,r1
000252  eb030340          ADD      r3,r3,r0,LSL #1
000256  1e6d              SUBS     r5,r5,#1
000258  d1f0              BNE      |L9.572|
00025a  f848102e          STR      r1,[r8,lr,LSL #2]
                  |L9.606|
00025e  1c64              ADDS     r4,r4,#1
000260  4284              CMP      r4,r0
000262  d3e0              BCC      |L9.550|
                  |L9.612|
000264  1c76              ADDS     r6,r6,#1
000266  4286              CMP      r6,r0
000268  d202              BCS      |L9.624|
00026a  2800              CMP      r0,#0
00026c  d0fa              BEQ      |L9.612|
00026e  e7d1              B        |L9.532|
                  |L9.624|
;;;141    	crc=crc16(matrix_sum(N,C,clipval),crc);
000270  e9dd0111          LDRD     r0,r1,[sp,#0x44]
000274  9a0c              LDR      r2,[sp,#0x30]
000276  f7fffffe          BL       matrix_sum
00027a  9901              LDR      r1,[sp,#4]
00027c  f7fffffe          BL       crc16
;;;142    #if CORE_DEBUG
;;;143    	printmatC(C,N,"matrix_mul_matrix_bitextract");
;;;144    #endif
;;;145    	
;;;146    	matrix_add_const(N,A,-val); /* return matrix to initial value */
000280  9a1e              LDR      r2,[sp,#0x78]
000282  9911              LDR      r1,[sp,#0x44]
000284  4252              RSBS     r2,r2,#0
000286  9b13              LDR      r3,[sp,#0x4c]
000288  fa0ffc82          SXTH     r12,r2
00028c  2900              CMP      r1,#0
00028e  bf1c              ITT      NE
000290  9c0b              LDRNE    r4,[sp,#0x2c]
000292  2c00              CMPNE    r4,#0
000294  d015              BEQ      |L9.706|
000296  f0110101          ANDS     r1,r1,#1
00029a  d002              BEQ      |L9.674|
00029c  881a              LDRH     r2,[r3,#0]
00029e  4462              ADD      r2,r2,r12
0002a0  801a              STRH     r2,[r3,#0]
                  |L9.674|
0002a2  428c              CMP      r4,r1
0002a4  d90d              BLS      |L9.706|
0002a6  bf00              NOP      
                  |L9.680|
0002a8  f8332011          LDRH     r2,[r3,r1,LSL #1]
0002ac  4462              ADD      r2,r2,r12
0002ae  f8232011          STRH     r2,[r3,r1,LSL #1]
0002b2  eb030241          ADD      r2,r3,r1,LSL #1
0002b6  1c89              ADDS     r1,r1,#2
0002b8  8855              LDRH     r5,[r2,#2]
0002ba  428c              CMP      r4,r1
0002bc  4465              ADD      r5,r5,r12
0002be  8055              STRH     r5,[r2,#2]
0002c0  d8f2              BHI      |L9.680|
                  |L9.706|
;;;147    	return crc;
;;;148    }
0002c2  b015              ADD      sp,sp,#0x54
0002c4  b200              SXTH     r0,r0                 ;147
0002c6  e8bd8ff0          POP      {r4-r11,pc}
;;;149    
                          ENDP

